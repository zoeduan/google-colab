{
  "title": "Do Generative Large Language Models need billions of parameters?",
  "authors": [
    "Sia Gholami",
    "Marwan Omar"
  ],
  "abstract": "\n This paper presents novel systems and methodologies for the development of efficient large language models (LLMs). It explores the trade-offs between model size, performance, and computational resources, with the aim of maximizing the efficiency of these AI systems. The research explores novel methods that allow different parts of the model to share parameters, reducing the total number of unique parameters required. This approach ensures that the model remains compact without sacrificing its ability to learn and represent complex language structures. This study provides valuable insights and tools for creating more efficient and effective LLMs, contributing to a more sustainable and accessible future for AI language modeling. \n",
  "references": [
    {
      "id": null,
      "title": "Do Generative Large Language Models need billions of parameters?",
      "authors": [
        "Sia Gholami",
        "Marwan Omar"
      ],
      "year": "2023",
      "venue": "",
      "doi": ""
    },
    {
      "id": "b0",
      "title": "Towards a human-like opendomain chatbot",
      "authors": [
        "Daniel Adiwardana",
        "Minh-Thang Luong",
        "David R So",
        "Jamie Hall",
        "Noah Fiedel",
        "Romal Thoppilan",
        "Zi Yang",
        "Apoorv Kulshreshtha",
        "Gaurav Nemade",
        "Yifeng Lu"
      ],
      "year": "2020",
      "venue": "Towards a human-like opendomain chatbot",
      "doi": ""
    },
    {
      "id": "b1",
      "title": "Do deep nets really need to be deep?",
      "authors": [
        "Jimmy Ba",
        "Rich Caruana"
      ],
      "year": "2014",
      "venue": "Advances in neural information processing systems",
      "doi": ""
    },
    {
      "id": "b2",
      "title": "The long-document transformer",
      "authors": [
        "Iz Beltagy",
        "Matthew E Peters",
        "Arman Cohan",
        "Longformer"
      ],
      "year": "2020",
      "venue": "The long-document transformer",
      "doi": ""
    },
    {
      "id": "b3",
      "title": "On the dangers of stochastic parrots: Can language models be too big?",
      "authors": [
        "Emily M Bender",
        "Timnit Gebru",
        "Angelina Mcmillan-Major",
        "Shmargaret Shmitchell"
      ],
      "year": "2021",
      "venue": "Proceedings of the 2021 ACM conference on fairness, accountability, and transparency",
      "doi": ""
    },
    {
      "id": "b4",
      "title": "Learning long-term dependencies with gradient descent is difficult",
      "authors": [
        "Yoshua Bengio",
        "Patrice Simard",
        "Paolo Frasconi"
      ],
      "year": "1994",
      "venue": "IEEE transactions on neural networks",
      "doi": ""
    },
    {
      "id": "b5",
      "title": "Text classification for online conversations with machine learning on aws",
      "authors": [
        "Ryan Brand",
        "Sia Gholami",
        "Daniel Horowitz",
        "Liutong Zhou",
        "Sourav Bhabesh"
      ],
      "year": "2022",
      "venue": "AWS Machine Learning Blog",
      "doi": ""
    },
    {
      "id": "b6",
      "title": "An analysis of the askmsr question-answering system",
      "authors": [
        "Eric Brill",
        "Susan Dumais",
        "Michele Banko"
      ],
      "year": "2002",
      "venue": "Proceedings of the 2002 Conference on Empirical Methods in Natural Language Processing",
      "doi": ""
    },
    {
      "id": "b7",
      "title": "Language models are few-shot learners",
      "authors": [
        "Benjamin Tom B Brown",
        "Nick Mann",
        "Melanie Ryder",
        "Jared Subbiah",
        "Prafulla Kaplan",
        "Arvind Dhariwal",
        "Pranav Neelakantan",
        "Girish Shyam",
        "Amanda Sastry",
        "Askell"
      ],
      "year": "2020",
      "venue": "Language models are few-shot learners",
      "doi": ""
    },
    {
      "id": "b8",
      "title": "The secret sharer: Evaluating and testing unintended memorization in neural networks",
      "authors": [
        "Nicholas Carlini",
        "Chang Liu",
        "Úlfar Erlingsson",
        "Jernej Kos",
        "Dawn Song"
      ],
      "year": "2019",
      "venue": "USENIX Security Symposium",
      "doi": ""
    },
    {
      "id": "b9",
      "title": "",
      "authors": [
        "Mostafa Dehghani",
        "Stephan Gouws",
        "Oriol Vinyals",
        "Jakob Uszkoreit",
        "Łukasz Kaiser"
      ],
      "year": "2018",
      "venue": "",
      "doi": ""
    },
    {
      "id": "b10",
      "title": "Pre-training of deep bidirectional transformers for language understanding",
      "authors": [
        "Jacob Devlin",
        "Ming-Wei Chang",
        "Kenton Lee",
        "Kristina Toutanova",
        "Bert"
      ],
      "year": "2018",
      "venue": "Pre-training of deep bidirectional transformers for language understanding",
      "doi": ""
    },
    {
      "id": "b11",
      "title": "Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity",
      "authors": [
        "William Fedus",
        "Barret Zoph",
        "Noam Shazeer"
      ],
      "year": "2022",
      "venue": "The Journal of Machine Learning Research",
      "doi": ""
    },
    {
      "id": "b12",
      "title": "Building watson: An overview of the deepqa project",
      "authors": [
        "David Ferrucci",
        "Eric Brown",
        "Jennifer Chu-Carroll",
        "James Fan",
        "David Gondek",
        "Aditya A Kalyanpur",
        "Adam Lally",
        "William Murdock",
        "Eric Nyberg",
        "John Prager"
      ],
      "year": "2010",
      "venue": "AI magazine",
      "doi": ""
    },
    {
      "id": "b13",
      "title": "Alexa, predict my flight delay",
      "authors": [
        "Sia Gholami",
        "Saba Khashe"
      ],
      "year": "2022",
      "venue": "Alexa, predict my flight delay",
      "doi": ""
    },
    {
      "id": "b14",
      "title": "Flight delay prediction using deep learning and conversational voicebased agents",
      "authors": [
        "Sia Gholami",
        "Saba Khashe"
      ],
      "year": "2022",
      "venue": "American Academic Scientific Research Journal for Engineering, Technology, and Sciences",
      "doi": ""
    },
    {
      "id": "b15",
      "title": "Zero-shot open-book question answering",
      "authors": [
        "Sia Gholami",
        "Mehdi Noori"
      ],
      "year": "2021",
      "venue": "Zero-shot open-book question answering",
      "doi": ""
    },
    {
      "id": "b16",
      "title": "You don't need labeled data for open-book question answering",
      "authors": [
        "Sia Gholami",
        "Mehdi Noori"
      ],
      "year": "2022",
      "venue": "Applied Sciences",
      "doi": ""
    },
    {
      "id": "b17",
      "title": "Create, train, and deploy a billion-parameter language model on terabytes of data with tensorflow and amazon sagemaker",
      "authors": [
        "Sia Gholami",
        "Danny Byrd",
        "Francisco Calderon Rodriguez",
        "Muhyun Kim",
        "Yohei Nakayama",
        "Mehdi Noori",
        "Nathalie Rauschmayr"
      ],
      "year": "2022",
      "venue": "AWS Machine Learning Blog",
      "doi": ""
    },
    {
      "id": "b18",
      "title": "Gaussian error linear units (gelus)",
      "authors": [
        "Dan Hendrycks",
        "Kevin Gimpel"
      ],
      "year": "2016",
      "venue": "Gaussian error linear units (gelus)",
      "doi": ""
    },
    {
      "id": "b19",
      "title": "On large-batch training for deep learning: Generalization gap and sharp minima",
      "authors": [
        "Nitish Shirish Keskar",
        "Dheevatsa Mudigere",
        "Jorge Nocedal",
        "Mikhail Smelyanskiy",
        "Ping Tak",
        "Peter Tang"
      ],
      "year": "2016",
      "venue": "On large-batch training for deep learning: Generalization gap and sharp minima",
      "doi": ""
    },
    {
      "id": "b20",
      "title": "Reformer: The efficient transformer",
      "authors": [
        "Nikita Kitaev",
        "Łukasz Kaiser",
        "Anselm Levskaya"
      ],
      "year": "2020",
      "venue": "Reformer: The efficient transformer",
      "doi": ""
    },
    {
      "id": "b21",
      "title": "Cross-lingual language model pretraining",
      "authors": [
        "Guillaume Lample",
        "Alexis Conneau"
      ],
      "year": "2019",
      "venue": "Cross-lingual language model pretraining",
      "doi": ""
    },
    {
      "id": "b22",
      "title": "Unsupervised machine translation using monolingual corpora only",
      "authors": [
        "Guillaume Lample",
        "Alexis Conneau",
        "Ludovic Denoyer",
        "Marc'aurelio Ranzato"
      ],
      "year": "2017",
      "venue": "Unsupervised machine translation using monolingual corpora only",
      "doi": ""
    },
    {
      "id": "b23",
      "title": "Piyush Sharma, and Radu Soricut. Albert: A lite bert for self-supervised learning of language representations",
      "authors": [
        "Zhenzhong Lan",
        "Mingda Chen",
        "Sebastian Goodman",
        "Kevin Gimpel"
      ],
      "year": "2019",
      "venue": "Piyush Sharma, and Radu Soricut. Albert: A lite bert for self-supervised learning of language representations",
      "doi": ""
    },
    {
      "id": "b24",
      "title": "Troubling trends in machine learning scholarship",
      "authors": [
        "C Zachary",
        "Jacob Lipton",
        "Steinhardt"
      ],
      "year": "2018",
      "venue": "Troubling trends in machine learning scholarship",
      "doi": ""
    },
    {
      "id": "b25",
      "title": "Text summarization with pretrained encoders",
      "authors": [
        "Yang Liu",
        "Mirella Lapata"
      ],
      "year": "2019",
      "venue": "Text summarization with pretrained encoders",
      "doi": ""
    },
    {
      "id": "b26",
      "title": "The structure and performance of an open-domain question answering system",
      "authors": [
        "Dan Moldovan",
        "Sanda Harabagiu",
        "Marius Pasca",
        "Rada Mihalcea",
        "Roxana Girju",
        "Richard Goodrum",
        "Vasile Rus"
      ],
      "year": "2000",
      "venue": "Proceedings of the 38th annual meeting of the Association for Computational Linguistics",
      "doi": ""
    },
    {
      "id": "b27",
      "title": "Improving language understanding by generative pre-training",
      "authors": [
        "Alec Radford",
        "Karthik Narasimhan",
        "Tim Salimans",
        "Ilya Sutskever"
      ],
      "year": "2018",
      "venue": "Improving language understanding by generative pre-training",
      "doi": ""
    },
    {
      "id": "b28",
      "title": "Language models are unsupervised multitask learners",
      "authors": [
        "Alec Radford",
        "Jeffrey Wu",
        "Rewon Child",
        "David Luan",
        "Dario Amodei",
        "Ilya Sutskever"
      ],
      "year": "2019",
      "venue": "OpenAI blog",
      "doi": ""
    },
    {
      "id": "b29",
      "title": "Exploring the limits of transfer learning with a unified text-to-text transformer",
      "authors": [
        "Colin Raffel",
        "Noam Shazeer",
        "Adam Roberts",
        "Katherine Lee",
        "Sharan Narang",
        "Michael Matena",
        "Yanqi Zhou",
        "Wei Li",
        "Peter J Liu"
      ],
      "year": "2020",
      "venue": "The Journal of Machine Learning Research",
      "doi": ""
    },
    {
      "id": "b30",
      "title": "Squad: 100,000+ questions for machine comprehension of text",
      "authors": [
        "Pranav Rajpurkar",
        "Jian Zhang",
        "Konstantin Lopyrev",
        "Percy Liang"
      ],
      "year": "2016",
      "venue": "Squad: 100,000+ questions for machine comprehension of text",
      "doi": ""
    },
    {
      "id": "b31",
      "title": "Megatron-lm: Training multi-billion parameter language models using model parallelism",
      "authors": [
        "Mohammad Shoeybi",
        "Mostofa Patwary",
        "Raul Puri",
        "Patrick Legresley",
        "Jared Casper",
        "Bryan Catanzaro"
      ],
      "year": "2019",
      "venue": "Megatron-lm: Training multi-billion parameter language models using model parallelism",
      "doi": ""
    },
    {
      "id": "b32",
      "title": "Energy and policy considerations for deep learning in nlp",
      "authors": [
        "Emma Strubell",
        "Ananya Ganesh",
        "Andrew Mccallum"
      ],
      "year": "2019",
      "venue": "Energy and policy considerations for deep learning in nlp",
      "doi": ""
    },
    {
      "id": "b33",
      "title": "Attention is all you need",
      "authors": [
        "Ashish Vaswani",
        "Noam Shazeer",
        "Niki Parmar",
        "Jakob Uszkoreit",
        "Llion Jones",
        "Aidan N Gomez",
        "Łukasz Kaiser",
        "Illia Polosukhin"
      ],
      "year": "2017",
      "venue": "Advances in neural information processing systems",
      "doi": ""
    },
    {
      "id": "b34",
      "title": "The trec-8 question answering track report",
      "authors": [
        "Ellen M Voorhees"
      ],
      "year": "1999",
      "venue": "Trec",
      "doi": ""
    },
    {
      "id": "b35",
      "title": "connections are expressive enough: Universal approximability of sparse transformers",
      "authors": [
        "Chulhee Yun",
        "Yin-Wen Chang",
        "Srinadh Bhojanapalli",
        "Ankit Singh Rawat",
        "Sashank Reddi",
        "Sanjiv Kumar"
      ],
      "year": "2020",
      "venue": "Advances in Neural Information Processing Systems",
      "doi": ""
    },
    {
      "id": "b36",
      "title": "Big bird: Transformers for longer sequences",
      "authors": [
        "Manzil Zaheer",
        "Guru Guruganesh",
        "Avinava Kumar",
        "Joshua Dubey",
        "Chris Ainslie",
        "Santiago Alberti",
        "Philip Ontanon",
        "Anirudh Pham",
        "Qifan Ravula",
        "Li Wang",
        "Yang"
      ],
      "year": "2020",
      "venue": "Advances in Neural Information Processing Systems",
      "doi": ""
    },
    {
      "id": "b37",
      "title": "Deep learning for sentiment analysis: A survey",
      "authors": [
        "Lei Zhang",
        "Shuai Wang",
        "Bing Liu"
      ],
      "year": "2018",
      "venue": "Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery",
      "doi": ""
    }
  ],
  "sections": [
    {
      "title": "Do Generative Large Language Models Need Billions Of Parameters?",
      "text": "Sia Gholami The Institute of Electrical and Electronics Engineers, Member IEEE gholami@ieee.org Marwan Omar Illinois Institute of Technology momar3@iit.edu"
    },
    {
      "title": "Abstract",
      "text": "This paper presents novel systems and methodologies for the development of efficient large language models (LLMs). It explores the trade-offs between model size, performance, and computational resources, with the aim of maximizing the efficiency of these AI systems. The research explores novel methods that allow different parts of the model to share parameters, reducing the total number of unique parameters required. This approach ensures that the model remains compact without sacrificing its ability to learn and represent complex language structures. This study provides valuable insights and tools for creating more efficient and effective LLMs, contributing to a more sustainable and accessible future for AI language modeling."
    },
    {
      "title": "1 Introduction",
      "text": "Large language models (LLMs) are a type of artificial intelligence (AI) model designed to understand and generate human-like text based on the context provided to them. These models have become increasingly popular in recent years, with the most notable examples being OpenAI's GPT series (Radford et al., 2019), including the latest version, GPT-4. LLMs have shown significant improvements over previous models in various natural language processing (NLP) tasks and have numerous practical applications in diverse domains. LLMs are a subcategory of deep learning models that focus on processing and generating text data. They are built using transformer architectures, which were first introduced by (Vaswani et al., 2017). and have since revolutionized the field of NLP. Transformers are characterized by their self-attention mechanisms, which enable them to process and generate text sequences in parallel rather than sequentially, as was the case with previous models like recurrent neural networks (RNNs) and long short-term memory (LSTM) networks. Large language models are trained on vast amounts of text data, often sourced from the internet, to learn patterns, structures, and relationships within the text. This allows them to understand and generate human-like text in a variety of contexts (Shoeybi et al., 2019). The size of these models is typically measured in terms of parameters, with recent models like GPT-3 and GPT-4 boasting billions of parameters (Fedus et al., 2022). Large language models have numerous practical applications across a wide range of domains, including but not limited to: 1. Text Generation and Completion: LLMs can generate human-like text based on a given prompt, making them valuable tools for tasks like content creation, email drafting, and code generation (Brown et al., 2020). 2. Machine Translation: LLMs have demonstrated impressive performance in translating text between languages, rivaling dedicated machine translation models (Lample and Conneau, 2019). 3. Summarization: LLMs can generate concise summaries of longer text passages, making them useful in areas like news aggregation, research paper summarization, and extracting key information from documents (Liu and Lapata, 2019). 4. Question Answering: LLMs can understand and answer questions based on a given context, making them effective tools for applications like virtual assistants, customer support, and knowledge extraction (Rajpurkar et al., 2016). 5. Sentiment Analysis: LLMs can classify text based on sentiment, enabling use cases in market research, social media monitoring, and product review analysis (Zhang et al., 2018). 6. Conversational AI: LLMs can generate contextually appropriate responses in a dialogue, making them useful for building chatbots and voice assistants (Adiwardana et al., 2020). Despite their impressive capabilities, large language models also present several challenges related to their development, deployment, and ethical considerations: * Computational and Energy Requirements: Training LLMs requires vast computational resources, making the process expensive and energy-intensive(Strubell et al., 2019). This limits accessibility to such models for researchers and organizations with limited resources. * Data Bias: Since LLMs are trained on large datasets sourced from the internet, they may inadvertently learn and propagate biases present in the data (Bender et al., 2021). This can lead to biased outputs, negatively impacting certain user groups or perpetuating harmful stereotypes. * Model Controllability: Controlling the outputs of LLMs can be challenging due to their complex and highly interconnected nature. This can generate inappropriate, harmful, or offensive content (Radford et al., 2019). * Intellectual Property Concerns: LLMs can generate text that resembles human-written content, which raises questions about intellectual property rights and potential copyright infringement (Lipton and Steinhardt, 2018). * Privacy Issues: As LLMs are trained on vast amounts of data, there is a possibility that they may unintentionally memorize and reveal sensitive information, presenting privacy concerns (Carlini et al., 2019). The primary goal of this study is to explore, investigate and propose new approaches to create efficient LLMs. This objective is important for several reasons: * Accessibility: Efficient LLMs require fewer computational resources for training and inference, making them more accessible to researchers, developers, and organizations with limited resources. This democratizes access to state-of-the-art natural language processing (NLP) technology, promoting innovation and reducing the gap between well-funded organizations and smaller players in the field. * Energy consumption: Training and deploying LLMs can be energy-intensive due to their size and complexity (Strubell et al., 2019). Developing more efficient models can significantly reduce energy consumption and the associated environmental impact, contributing to more sustainable AI development practices. * Cost reduction: Efficient LLMs can lower the financial costs associated with training, deployment, and maintenance. This allows organizations to allocate resources more effectively, potentially accelerating the development of new applications and services that rely on advanced NLP capabilities. * Latency and real-time applications: Efficient LLMs can provide faster response times during inference, which is particularly important for real-time applications, such as conversational AI, virtual assistants, and other interactive systems that demand low latency. * Edge computing: As more AI applications are being deployed on edge devices, such as smartphones and IoT devices, it is crucial to develop efficient LLMs that can operate within the constraints of limited computing power, memory, and energy resources. Efficient LLMs can enable sophisticated NLP capabilities on edge devices, expanding their potential use cases and improving user experiences. * Scalability: Developing efficient LLMs allows for better scalability in terms of the number of users and applications supported by a given model. This is particularly relevant for cloud-based AI services that need to serve a large number of clients simultaneously, where resource efficiency directly translates into cost savings and improved performance. * Encouraging research: Making LLMs more efficient can stimulate further research in model optimization, compression, and resource-conscious training techniques. This can lead to the discovery of novel methods that improve LLMs and other types of deep learning models, benefiting the broader AI research community. Parameter sharing can indeed help make Transformer models more efficient. Transformers are known for their large number of parameters, which can lead to high computational and memory requirements. By sharing parameters across different parts of the model, you can reduce the total number of unique parameters, leading to a smaller and more efficient model. Using parameter sharing in Transformers can be beneficial for several reasons: * Reduced model size: Transformers typically have a large number of parameters, which can result in substantial memory and storage requirements. Parameter sharing helps reduce the overall number of unique parameters, leading to a more compact model that is easier to store and deploy. * Faster training and inference: With fewer parameters to learn and process, training and inference times can be reduced, leading to more efficient and faster models. This can be especially important when deploying models on resource-constrained devices or in situations where low-latency responses are critical. * Improved generalization: Sharing parameters across different parts of the model can encourage the learning of more general and robust features. This can potentially lead to better generalization to unseen data or tasks, improving the model's overall performance. * Easier optimization: With fewer parameters to optimize, the model's optimization landscape may become smoother and easier to navigate. This can lead to faster convergence during training and potentially better final model performance. * Regularization effect: Parameter sharing can have a regularization effect by implicitly constraining the model's capacity. This can help prevent overfitting, especially when training data is limited. * Transfer learning and multi-task learning: Parameter sharing can be used to share representations between different tasks or modalities, promoting the learning of shared features and potentially improving performance on multiple tasks simultaneously. However, it's important to strike a balance between the benefits of parameter sharing and the potential reduction in model performance. Excessive parameter sharing can lead to a loss of expressive power, resulting in decreased performance on the given task. It is crucial to carefully consider the trade-offs and determine the appropriate level of parameter sharing that maximizes efficiency while maintaining the desired performance."
    },
    {
      "title": "2 Related Works",
      "text": "Natural Language Processing (NLP) has been a major area of research in Artificial Intelligence and Machine Learning since the early days of computer science (Voorhees et al., 1999; Moldovan et al., 2000; Brill et al., 2002; Ferrucci et al., 2010; Gholami and Noori, 2021, 2022; Gholami et al., 2022; Gholami and Khashe, 2022; Brand et al., 2022). Parameter sharing has been employed in several transformer models to improve efficiency and reduce the number of parameters. Some notable examples include: Universal Transformers (Dehghani et al., 2018): Universal Transformers extend the original transformer architecture by sharing parameters across layers. Instead of having separate parameters for each layer, the same set of weights is applied recursively for a fixed number of steps, updating the hidden states at each step. This approach substantially reduces the number of parameters while maintaining competitive performance on various NLP tasks. ALBERT (Lan et al., 2019): ALBERT (A Lite BERT) shares all parameters across layers, significantly reducing model size compared to the original BERT. By doing so, ALBERT achieves comparable performance to larger models with fewer parameters, making it more efficient and easier to deploy. LayerDrop (fan): LayerDrop is a technique that randomly drops a subset of layers during training, effectively sharing parameters between different \"depths\" of the transformer. This approach can help improve efficiency and model performance without significantly increasing the number of parameters. Tied Transformers (Lample et al., 2017): Tied Transformers use parameter sharing between the encoder and the decoder, sharing not only the layer parameters but also the token embeddings and positional embeddings. This approach reduces the number of parameters and improves the model's efficiency, particularly in unsupervised machine translation tasks. Depthwise Separable Transformers (Kitaev et al., 2020): Depthwise Separable Transformers employ parameter sharing across different attention heads within the same layer. This method reduces the number of parameters while preserving the benefits of multi-head attention, leading to a more efficient model. Longformer (Beltagy et al., 2020): Longformer utilizes a combination of local and global attention mechanisms, sharing parameters between local and global attention heads. This approach allows the model to process long documents efficiently without a significant increase in the number of parameters. Big Bird (Zaheer et al., 2020): Big Bird employs a combination of sparse attention mechanisms and parameter sharing across different attention heads to create an efficient transformer capable of handling longer sequences. This approach reduces both the computational complexity and the number of parameters compared to the original transformer architecture. Switch Transformers (Fedus et al., 2022): Switch Transformers introduce a novel parameter-sharing technique called \"mixture of experts,\" in which different parts of the model specialize in different aspects of the data. By sharing parameters across experts and selectively activating only a subset of them during inference, Switch Transformers can scale to trillion-parameter models while maintaining high efficiency. These examples demonstrate the effectiveness of parameter sharing in creating more efficient transformers while maintaining competitive performance on various NLP tasks."
    },
    {
      "title": "3 Approach",
      "text": "Transformers were introduced by Vaswani et al.(Vaswani et al., 2017) as a novel architecture for NLP tasks, relying on self-attention mechanisms to capture long-range dependencies in the input data. They consist of a stack of identical layers, each containing a multi-head self-attention mechanism and position-wise feed-forward networks. The self-attention mechanism allows the model to weigh the importance of different tokens in the input sequence relative to each other, enabling it to learn complex patterns and dependencies effectively. Despite their impressive performance, transformers have high computational and memory requirements. These demands stem from the quadratic complexity of the self-attention mechanism, which requires calculating attention scores for each token pair in the input sequence. Additionally, transformers often have millions of parameters, making them resource-intensive to store and update during training and inference (Yun et al., 2020). Parameter sharing is a technique used to reduce the number of model parameters by reusing them across different components of the model. This approach has been successfully applied in convolutional neural networks (CNNs) for image recognition tasks, where the same set of weights is used across different spatial locations, significantly reducing the number of parameters. Parameter sharing offers several benefits in building efficient transformers:* Reduced Model Size: By reusing parameters across different layers or components, parameter sharing substantially decreases the number of unique parameters required to represent the model. This reduction in model size makes it easier to deploy transformers on resource-constrained devices, where memory is often limited. * Faster Training and Inference: With fewer parameters to update during training, the model can be trained more quickly, leading to faster convergence. This speed-up can be particularly beneficial when training large models or working with large-scale datasets. Moreover, during inference, a smaller model requires fewer computations, which translates to faster prediction times. * Regularization Effect: Parameter sharing can act as a form of implicit regularization, constraining the model's capacity and reducing overfitting. By reusing parameters, the model is forced to learn shared representations, which can lead to better generalization performance on unseen data. Several parameter-sharing (Radford et al., 2018) techniques have been proposed and explored to improve the efficiency of transformers. We discuss some of the most prominent approaches: * Universal Transformers: Universal Transformers (Dehghani et al., 2018) extend the original transformer architecture by sharing parameters across layers. Instead of having separate parameters for each layer, Universal Transformers apply the same set of weights recursively for a fixed number of steps, updating the hidden states at each step. This approach significantly reduces the number of parameters while maintaining competitive performance on various NLP tasks. * Layer-wise Parameter Sharing: Layer-wise parameter sharing involves reusing parameters across multiple layers in the transformer. For example, ALBERT (Lan et al., 2019) shares all parameters across layers, leading to a substantial reduction in model size. By doing so, ALBERT achieves comparable performance to larger models with fewer parameters, making it more efficient and easier to deploy. * Head-wise Parameter Sharing: In transformers, the multi-head self-attention mechanism computes multiple attention scores for each token pair. Head-wise parameter sharing involves reusing the same set of weights across different attention heads within the same layer. This approach can help reduce the number of parameters while preserving the benefits of multi-head attention. * Parameter Sharing in Feed-Forward Networks: Transformers also include position-wise feed-forward networks in each layer, which can be another source of parameter reduction. Sharing parameters across the feed-forward networks of different layers can help achieve a more compact model while maintaining its capacity to learn complex patterns. * Pre-trained Models and Fine-tuning: Parameter sharing can also be employed through the use of pre-trained transformer models, such as BERT (Devlin et al., 2018) and GPT (Radford et al., 2018). By fine-tuning these pre-trained models on specific tasks, it is possible to leverage the shared knowledge encoded in the model's parameters and achieve strong performance with fewer training samples and reduced training time. Parameter sharing is not without its drawbacks and challenges. Some of the key issues include: * Reduced Expressive Power: Sharing parameters can limit the model's expressive power, as it is forced to learn shared representations. In some cases, this reduction in capacity can lead to a degradation in performance, especially when the shared parameters are not suitable for the task at hand. * Hyperparameter Tuning: Parameter sharing introduces additional hyperparameters, such as the number of shared layers or the extent of sharing within a layer. Finding the optimal configuration of these hyperparameters can be challenging and may require extensive experimentation and search. * Task-Specific Considerations: Not all tasks may benefit from parameter sharing, and the optimal degree of sharing can vary depending on the nature of the task. For example, tasks that require modeling fine-grained dependencies or learning highly specialized representations may suffer from performance degradation with increased parameter sharing. Parameter sharing has emerged as a promising approach to building efficient transformers, offering benefits such as reduced model size, faster training and inference, and implicit regularization. Various parameter sharing techniques have been proposed and explored, including layer-wise, head-wise, and feed-forward network sharing, as well as leveraging pre-trained models. To enhance the Transformer model's efficiency and efficacy for self-supervised learning of language representations. The suggested technique does this by lowering the number of model parameters while maintaining or enhancing performance. The proposed technique uses two key strategies: parameter sharing and factorized embedding parameterization across layers, which results in a smaller model with fewer parameters. I call the transformer created by these techniques Generative Pre-trained Transformer Efficio (GPT-Efficio)."
    },
    {
      "title": "3.0.1 Embedding Layer Factorization:",
      "text": "In this approach, the original embedding layer is factorized into two matrices, which reduces the total number of parameters in the model. This is particularly useful for large-scale models like BERT and GPT, where the embedding layer can consume a significant amount of memory due to the large vocabulary size. The factorization works by separating the original embedding layer into two smaller layers: 1. A word-piece embedding matrix that maps the input tokens into a lower-dimensional space (\\(EmbeddingSize\\)). 2. A projection matrix that maps the lower-dimensional embeddings into the model's hidden state dimension (\\(HiddenSize\\)). The original embedding matrix of the decoder transformer has a total of \\(VocabSize\\times HiddenSize\\) parameters. To get better performance, NLP models tend to use large vocabulary size and this layer can be billions of parameters (Keskar et al., 2016). In this approach, I break up the embedding matrix into two smaller matrices, this will bring down the number of parameters to \\(VocabSize\\times EmbeddingSize+EmbeddingSize\\times HiddenSize\\). This technique is more effective when the \\(EmbeddingSize\\) is significantly smaller than the \\(HiddenSize\\). However, this kind of factorization can lead to a loss of information. Mapping the tokens to a smaller dimension might not capture all the nuances of the input data. In turn, this might affect the performance of the model, causing it to make more errors or have a lower overall accuracy."
    },
    {
      "title": "3.0.2 Parameter Sharing Across Layers:",
      "text": "In my approach GPT-Efficio, the adoption of parameter sharing strategies is prevalent to mitigate the escalating complexity arising from an abundance of parameters. By sharing parameters, the model size can be substantially reduced, consequently enhancing generalization by introducing repetition in the underlying structure of the model. In this context, I outline several methodologies for sharing parameters in GPT-Efficio: 1. Layer-wise Parameter Sharing: This technique involves sharing the same set of parameters across all transformer layers, which significantly diminishes the model size. This can be practically implemented, for instance, in PyTorch by defining a single transformer layer that is repeatedly employed in a loop for all layers. However, this method might potentially curtail the model's expressiveness, given that identical transformations are propagated at each layer. 2. Sub-layer Parameter Sharing: Here, the same parameters are shared between two principal components of each transformer layer, namely the self-attention and feed-forward sub-layers. This method further contributes to the reduction of model complexity. 3. Sub-layer Parameter Sharing in Groups: In this approach, the same parameters are shared between two principal components of each transformer layer, namely the self-attention and feed-forward sub-layers in groups. For example if the group number is 1, all the parameters are shared across all layers, if the group number is 2, the parameters will be shared between half of the layers and so on. The number of groups is a hyperparameter that should be optimized for the downstream tasks. While the benefits of parameter sharing are evident in terms of model size reduction and potential generalization improvements, it is important to consider that these benefits may not uniformly translate across all problems. The risk of limiting the model's capacity and expressiveness is a noteworthy drawback that necessitates careful consideration of the specific use case when deciding on the adoption of parameter sharing techniques."
    },
    {
      "title": "4 Experiments",
      "text": "In this chapter we present the results of each of our approaches in the context of language modeling (i.e. completion tasks) and question answering."
    },
    {
      "title": "Results",
      "text": "The implementation of parameter sharing strategies in GPT-Efficio, yields an array of outcomes that significantly affect the performance and computational efficiency of these models. Positive outcomes include: 1. Diminished Model Complexity: Parameter sharing can drastically reduce the count of unique trainable parameters, thereby decreasing the overall complexity of the model. This benefit is particularly advantageous in scenarios where computational resources or memory availability are constrained. 2. Expedited Training Process: Given fewer unique parameters, the training process can be substantially accelerated. This advantage becomes increasingly significant when dealing with large-scale datasets or in scenarios where time efficiency is a key consideration. 3. Enhanced Generalization: The adoption of parameter sharing could prompt the model to learn more generalized features that apply across various parts of the input. For instance, sharing weights across all positions in a sequence may force the model to learn position-independent features. Similarly, sharing parameters across different layers or sub-layers can promote the extraction of features with broader applicability [Bengio et al., 1994]. 4. Mitigation of Overfitting: By reducing the number of parameters, parameter sharing strategies can contribute to the prevention of overfitting, especially in situations where the training data available is relatively scarce. Conversely, there exist drawbacks that merit consideration: 1. Limited Model Expressivity: Although parameter sharing can contribute to complexity reduction and improved generalization, it could concurrently constrain the model's capacity. If identical parameters are applied across different layers or sub-layers, the model might be inhibited in its ability to learn distinct representations at different depths of the network, potentially compromising its performance on complex tasks. 2. Risk of Sub-optimal Solutions: There may be instances where the optimal solution necessitates different parameters in different components of the model. In such cases, parameter sharing could potentially culminate in sub-optimal solutions. 3. Dependence on Task and Dataset Specificity: The effectiveness of parameter sharing can be heavily influenced by the specific task and dataset in use. It is not guaranteed to invariably lead to performance improvements and could, in certain cases, negatively impact the model's performance. Table 1 demonstrates the GPT-Efficio performance in comparison with GPT-3. Table 2 shows the GPT-Efficio performance in comparison with GPT-3. Figure 1: Performance of parameter sharing approach on completion tasks Figure 2: Performance of parameter sharing approach on QA tasks"
    },
    {
      "title": "5 Analysis",
      "text": "This section investigates the effects of each hyperparameter in a transformer model and its influences on the performance: 1. Model Size (\\(d_{model}\\)): A larger model size typically enables the model to learn more complex representations, but it also increases the risk of overfitting and requires more computational resources. 2. Number of Layers (\\(num_{layers}\\)): More layers allow the model to learn more complex, hierarchical representations. However, adding too many layers can lead to difficulties in training due to problems like vanishing or exploding gradients. 3. Number of Heads (\\(num_{heads}\\)): More heads allow the model to focus on different parts of the input for each head. This can lead to better performance, but it also increases the computational cost and the risk of overfitting. 4. Feed Forward Network Dimension (\\(d_{ff}\\)): Increasing this value allows the feed-forward network to learn more complex mappings and can lead to better performance, but it also increases the model size and the risk of overfitting. 5. Learning Rate: If set too high, the model might converge too quickly to a suboptimal solution or might not converge at all. If set too low, the learning process can become too slow. There's usually a sweet spot that needs to be found via experimentation. 6. Batch Size: Larger batch sizes mean more stable and accurate gradient estimates, at the cost of increased memory usage. However, it's also been found that too large batch sizes can lead to poorer generalization [Raffel et al., 2020]. 7. Epochs: Training for more epochs can lead to better performance on the training set, but also increases the risk of overfitting. Early stopping techniques can be used to mitigate this. 8. Warmup Steps: This hyperparameter is specific to the learning rate scheduler used in transformers. It helps in stabilizing the learning rate during the initial phase of training. 9. Dropout Rate: Dropout is a regularization technique. A higher dropout rate increases the amount of regularization, which can help prevent overfitting. 10. Max Sequence Length: This hyperparameter can affect both the computational cost and the kinds of sequences the model can handle. If set too small, important context might be lost. 11. Parameter Sharing Group Size: Grouped parameter sharing can help reduce overfitting by reducing the number of unique parameters. However, if set too high, the model might not be able to learn complex hierarchical representations effectively. 12. Optimizer: The choice of optimizer can significantly impact model performance and convergence speed. Adam is a common choice for transformer models due to its efficient handling of sparse gradients and adaptive learning rates. \\begin{table} \\begin{tabular}{l c c c c c} \\hline \\hline **Model** & \\(n_{params}\\) & **LAMBADA** & **LAMBADA** & **StoryCloze** & **HellaSwag** \\\\ & & **(acc)** & **(ppl)** & **(acc)** & **(acc)** \\\\ \\hline GPT-3 Zero-Shot & 175B & 76.2 & 3.00 & 83.2 & 78.9 \\\\ GPT-3 One-Shot & 175B & 72.5 & 3.35 & 84.7 & 78.1 \\\\ GPT-3 Few-Shot & 175B & 86.4 & 1.92 & 87.7 & 79.3 \\\\ GPT-Efficio & 950M & 67.1 & 9.2 & 80.5 & 72.6 \\\\ \\hline \\hline \\end{tabular} \\end{table} Table 1: Performance of parameter sharing approach on completion tasks \\begin{table} \\begin{tabular}{l c c c c} \\hline \\hline **Model** & \\(n_{params}\\) & **NQ** & **WebQ** & **TriviaQA** \\\\ \\hline GPT-3 Zero-Shot & 175B & 14.6 & 14.4 & 64.3 \\\\ GPT-3 One-Shot & 175B & 23.0 & 25.3 & 68.0 \\\\ GPT-3 Few-Shot & 175B & 29.9 & 41.5 & 71.2 \\\\ GPT-Efficio & 950M & 27.5 & 40.6 & 69.2 \\\\ \\hline \\hline \\end{tabular} \\end{table} Table 2: Performance of parameter sharing approach on QA tasks13. Activation Function: This function adds non-linearity to the model, enabling it to learn more complex patterns.'relu' and 'gelu' are common choices in transformer models. 14. Weight Initialization: Proper initialization can help prevent issues such as vanishing or exploding gradients, leading to faster and more stable convergence. 15. Gradient Clipping: This is used to prevent exploding gradients, which can cause numerical instability and poor performance (Hendrycks and Gimpel, 2016). 16. Learning Rate Decay: This involves reducing the learning rate as training progresses to enable fine-tuning of the model parameters in the later stages of training. 17. Regularization Techniques: Apart from Dropout, there are other regularization techniques like L1 and L2 regularization, and also techniques like layer normalization that help to stabilize learning and prevent overfitting. The appropriate setting of these hyperparameters is task-dependent and usually requires a fair amount of trial and error, or more systematic approaches like grid search or Bayesian optimization, to find the most effective combination. They can significantly affect the time it takes to train your model, the quality of the model, and its ultimate performance. Table 3 shows the effect of changing the \\(d_{model}\\) hyperparameter on the model's performance: It should be noted that these effects are not absolute and may vary depending on the other hyperparameters and the specific task the model is being trained for. The optimal \\(d_{model}\\) value usually requires empirical tuning. Table 4 demonstrates the GPT-Efficio performance in comparison with GPT-3. Table 5 shows the GPT-Efficio performance in comparison with GPT-3. \\begin{table} \\begin{tabular}{l l l l l l l} \\hline \\hline **Model** & \\(d_{model}\\) & \\(n_{params}\\) & **LAMBADA** & **LAMBADA** & **StoryCloze** & **HellaSwag** \\\\ & & & **(acc)** & **(ppl)** & **(acc)** & **(acc)** \\\\ \\hline GPT-3 Zero-Shot & 12288 & 175B & 76.2 & 3.00 & 83.2 & 78.9 \\\\ GPT-3 One-Shot & 12288 & 175B & 72.5 & 3.35 & 84.7 & 78.1 \\\\ GPT-3 Few-Shot & 12288 & 175B & 86.4 & 1.92 & 87.7 & 79.3 \\\\ GPT-Efficio & 2048 & 950M & 67.1 & 9.2 & 80.5 & 72.6 \\\\ GPT-Efficio & 1536 & 660M & 58.83 & 11.76 & 58.49 & 68.34 \\\\ GPT-Efficio & 1024 & 290M & 47.79 & 14.43 & 50.21 & 59.32 \\\\ \\hline \\hline \\end{tabular} \\end{table} Table 4: Analysis of the effects of hyperparameter \\(d_{model}\\) on completion tasks \\begin{table} \\begin{tabular}{l l l} \\hline \\hline **Hyperparameter:** & **Increase** & **Decrease** \\\\ \\(d_{model}\\) & & & \\\\ \\hline Model Complexity & \\begin{tabular}{l} Increases the capacity of the model to learn \\\\ more complex representations. \\\\ \\end{tabular} & \\begin{tabular}{l} Reduces the capacity of the model, potentially making it unable to learn complex patterns. \\\\ \\end{tabular} \\\\ Risk of Overfitting & \\begin{tabular}{l} Increases, as a larger model with more parameters might fit the noise in the training data. \\\\ \\end{tabular} & \\begin{tabular}{l} Reduces, as a smaller model has less capacity to fit the noise in the training data. \\\\ \\end{tabular} \\\\ Computational Resources & \\begin{tabular}{l} Requires more computational resources, including memory and processing power. \\\\ Likely increases due to the increased number of parameters. \\\\ \\end{tabular} & \\begin{tabular}{l} Requires fewer computational resources. \\\\ [2] \\\\ \\end{tabular} \\\\ Generalization Ability & \\begin{tabular}{l} Hight decrease if the model is too large and starts to overfit. \\\\ \\end{tabular} & \\begin{tabular}{l} Regulates fewer computational resources. \\\\ Likely decreases due to fewer parameters to learn. \\\\ \\end{tabular} \\\\ Generalization Ability & \\begin{tabular}{l} Hight decrease if the model is too large and starts to overfit. \\\\ \\end{tabular} & \\begin{tabular}{l} Might increase up to a point, as a smaller model may generalize better, but if the model is too small, it might underfit the data. \\\\ \\end{tabular} \\\\ \\hline \\hline \\end{tabular} \\end{table} Table 3: Effects of hyperparameter \\(d_{model}\\)Figure 4: Analysis of the effects of hyperparameter \\(d_{model}\\) on QA tasks Figure 3: Analysis of the effects of hyperparameter \\(d_{model}\\) on completion tasks \\begin{table} \\begin{tabular}{l c c c c c} \\hline \\hline **Model** & \\(d_{model}\\) & \\(n_{params}\\) & **NQ** & **WebQ** & **TriviaQA** \\\\ \\hline GPT-3 Zero-Shot & 12288 & 175B & 14.6 & 14.4 & 64.3 \\\\ GPT-3 One-Shot & 12288 & 175B & 23.0 & 25.3 & 68.0 \\\\ GPT-3 Few-Shot & 12288 & 175B & 29.9 & 41.5 & 71.2 \\\\ GPT-Efficio & 2048 & 950M & 27.5 & 40.6 & 69.2 \\\\ GPT-Efficio & 1536 & 660M & 19.32 & 31.86 & 58.49 \\\\ GPT-Efficio & 1024 & 290M & 15.28 & 27.67 & 50.21 \\\\ \\hline \\hline \\end{tabular} \\end{table} Table 5: Analysis of the effects of hyperparameter \\(d_{model}\\) on QA tasks"
    },
    {
      "title": "6 Limitations",
      "text": "Parameter sharing techniques in transformer-based models are used to mitigate issues related to the high computational cost and complexity that accompany these models. However, despite the apparent benefits, there are several limitations associated with the application of these techniques: * Limited Model Expressivity: One of the most pronounced drawbacks of parameter sharing is the potential reduction in model expressivity. By using the same parameters across different layers or parts of the model, we inherently restrict the ability of the model to learn and represent diverse features and relationships. This could lead to a lack of depth in the learned representations, potentially impacting the model's performance on complex tasks that require the learning of diverse and intricate patterns. * Sub-optimal Solutions: In certain cases, the optimal solution might require unique parameters in different parts of the model. By enforcing parameter sharing, we might be pushing the model towards sub-optimal solutions. This could lead to poor model performance, especially in tasks where the learning of unique representations at different parts or depths of the model is critical. * Task and Data Dependence: The effectiveness of parameter sharing techniques is not universal and depends heavily on the specific task and data at hand. For instance, parameter sharing might work well for some tasks, such as text generation or sequence-to-sequence prediction, where recurrent patterns exist. However, for tasks where the requirement of unique representations across the model is high, parameter sharing could negatively impact performance. * Risk of Over-simplification: While reducing complexity is one of the motivations behind parameter sharing, there's a risk of oversimplifying the model to the extent that it fails to capture the necessary complexity of the data. This can lead to underfitting, where the model is too simple to capture the underlying structure of the data, leading to poor performance. * Difficulty in Optimization: Sharing parameters can make the optimization landscape more complex. When parameters are tied, a change in one location means a change in another, potentially leading to more difficult optimization and slower convergence. While parameter sharing offers valuable advantages, it's not a one-size-fits-all solution. Consideration must be given to the specific nature of the task, the complexity of the data, and the capacity of the model to ensure that parameter sharing benefits outweigh the potential limitations."
    },
    {
      "title": "7 Future Work",
      "text": "Given the demonstrated effectiveness as well as the limitations of parameter sharing techniques in transformer-based models like GPT, future work in this domain could be directed towards several interesting and promising avenues: * Adaptive Parameter Sharing: Developing methods for adaptive parameter sharing could be an exciting line of research. These methods would adjust the extent of parameter sharing based on the specific task or data. This could involve learning which parts of the model should share parameters and to what extent, potentially through the use of techniques like reinforcement learning or meta-learning. * Hybrid Parameter Sharing Schemes: Exploring hybrid parameter sharing schemes that combine different types of parameter sharing could be beneficial. For instance, some layers could share parameters while others could have unique parameters, or different types of parameter sharing could be used for different parts of the model. * Task-specific Parameter Sharing Strategies: Investigating task-specific parameter sharing strategies could lead to improvements in performance. For example, different parameter sharing techniques could be developed and evaluated for tasks like text generation, translation, summarization, or question-answering. * Learning Shared and Unique Representations: Research could be directed towards models that can learn both shared and unique representations simultaneously. This could involvearchitectures that have a mix of shared and unique parameters, allowing them to benefit from the generalization of parameter sharing while also being able to learn task or data-specific features. * Theoretical Analysis of Parameter Sharing: Further theoretical analysis of parameter sharing could lead to a better understanding of its impacts on model capacity, generalization, optimization, and other aspects of model performance. This could involve both analysis of existing methods and the development of new theoretical models or frameworks. * Improved Optimization Techniques: Given the potential difficulties in optimizing models with shared parameters, developing improved optimization techniques for such models could be beneficial. This could include new training algorithms or regularization techniques designed specifically for models with parameter sharing. * Evaluation Across Diverse Tasks and Datasets: Lastly, systematic evaluation of parameter sharing techniques across a wider range of tasks and datasets could provide valuable insights into when and why these techniques are effective or ineffective. This could guide the development of more robust and adaptable parameter sharing methods. By pursuing these directions, future work could overcome some of the limitations of current parameter sharing techniques and lead to more efficient and effective transformer-based models."
    },
    {
      "title": "8 Conclusion",
      "text": "In this approach, we introduced a new Large Language Model, GPT-Effacio, that implements two techniques we call \"Embedding layer factorization\" and \"Parameter sharing across layers\". The application of parameter sharing strategies in transformer-based models such as the Generative Pretrained Transformer (GPT) can produce a myriad of potential outcomes, each with significant implications for the model's performance, computational efficiency, and generalization capabilities. In particular, these techniques offer a way to address several challenges endemic to machine learning, such as reducing model complexity, speeding up training processes, improving generalization, and mitigating overfitting risks. These potential benefits highlight the value of parameter sharing, especially in situations where computational resources, memory, or time are constraining factors, or where the available training data is limited. While parameter sharing techniques provide promising avenues for optimizing transformer-based models, the decision to implement such strategies should be made judiciously, guided by the specific requirements of the task and empirical evidence. Careful considerations must be made to balance the trade-off between model complexity and expressivity, and extensive experimentation and validation are crucial to ascertain the most effective application of these methods."
    },
    {
      "title": "References",
      "text": "* Adiwardana et al. [2020] Daniel Adiwardana, Minh-Thang Luong, David R So, Jamie Hall, Noah Fiedel, Romal Thoppilan, Zi Yang, Apoorv Kulshreshtha, Gaurav Nemade, Yifeng Lu, et al. Towards a human-like open-domain chatbot. _arXiv preprint arXiv:2001.09977_, 2020. * Ba and Caruana [2014] Jimmy Ba and Rich Caruana. Do deep nets really need to be deep? _Advances in neural information processing systems_, 27, 2014. * Beltagy et al. [2020] Iz Beltagy, Matthew E Peters, and Arman Cohan. Longformer: The long-document transformer. _arXiv preprint arXiv:2004.05150_, 2020. * Bender et al. [2021] Emily M Bender, Timnit Gebru, Angelina McMillan-Major, and Shmargaret Shmitchell. On the dangers of stochastic parrots: Can language models be too big? In _Proceedings of the 2021 ACM conference on fairness, accountability, and transparency_, pages 610-623, 2021. * Bengio et al. [1994] Yoshua Bengio, Patrice Simard, and Paolo Frasconi. Learning long-term dependencies with gradient descent is difficult. _IEEE transactions on neural networks_, 5(2):157-166, 1994. * Bender et al. [2015]Ryan Brand, Sia Gholami, Daniel Horowitz, Luitong Zhou, and Sourav Bhabesh. Text classification for online conversations with machine learning on aws. _AWS Machine Learning Blog_, 2022. * Brill et al. (2002) Eric Brill, Susan Dumais, and Michele Banko. An analysis of the askmsr question-answering system. In _Proceedings of the 2002 Conference on Empirical Methods in Natural Language Processing (EMNLP 2002)_, pages 257-264, 2002. * Brown et al. (2020) Tom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. _arXiv preprint arXiv:2005.14165_, 2020. * Carlini et al. (2019) Nicholas Carlini, Chang Liu, Ulfar Erlingsson, Jernej Kos, and Dawn Song. The secret sharer: Evaluating and testing unintended memorization in neural networks. In _USENIX Security Symposium_, volume 267, 2019. * Dehghani et al. (2018) Mostafa Dehghani, Stephan Gouws, Oriol Vinyals, Jakob Uszkoreit, and Lukasz Kaiser. Universal transformers. _arXiv preprint arXiv:1807.03819_, 2018. * Devlin et al. (2018) Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding. _arXiv preprint arXiv:1810.04805_, 2018. * Fedus et al. (2022) William Fedus, Barret Zoph, and Noam Shazeer. Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity. _The Journal of Machine Learning Research_, 23(1):5232-5270, 2022. * Ferrucci et al. (2010) David Ferrucci, Eric Brown, Jennifer Chu-Carroll, James Fan, David Gondek, Aditya A Kalyanpur, Adam Lally, J William Murdock, Eric Nyberg, John Prager, et al. Building watson: An overview of the deepqa project. _AI magazine_, 31(3):59-79, 2010. * Gholami and Khashe (2022a) Sia Gholami and Saba Khashe. Alexa, predict my flight delay. _arXiv preprint arXiv:2208.09921_, 2022a. * Gholami and Khashe (2022b) Sia Gholami and Saba Khashe. Flight delay prediction using deep learning and conversational voice-based agents. _American Academic Scientific Research Journal for Engineering, Technology, and Sciences_, 89(1):60-72, 2022b. * Gholami and Noori (2021) Sia Gholami and Mehdi Noori. Zero-shot open-book question answering. _arXiv preprint arXiv:2111.11520_, 2021. * Gholami and Noori (2022) Sia Gholami and Mehdi Noori. You don't need labeled data for open-book question answering. _Applied Sciences_, 12(1):111, 2022. * Gholami et al. (2022) Sia Gholami, Danny Byrd, Francisco Calderon Rodriguez, Muhyun Kim, Yohei Nakayama, Mehdi Noori, and Nathalie Rauschmayr. Create, train, and deploy a billion-parameter language model on terabytes of data with tensorflow and amazon sagemaker. _AWS Machine Learning Blog_, 2022. * Hendrycks and Gimpel (2016) Dan Hendrycks and Kevin Gimpel. Gaussian error linear units (gelus). _arXiv preprint arXiv:1606.08415_, 2016. * Keskar et al. (2016) Nitish Shirish Keskar, Dheevatsa Mudigere, Jorge Nocedal, Mikhail Smelyanskiy, and Ping Tak Peter Tang. On large-batch training for deep learning: Generalization gap and sharp minima. _arXiv preprint arXiv:1609.04836_, 2016. * Kitaev et al. (2020) Nikita Kitaev, Lukasz Kaiser, and Anselm Levskaya. Reformer: The efficient transformer. _arXiv preprint arXiv:2001.04451_, 2020. * Lample and Conneau (2019) Guillaume Lample and Alexis Conneau. Cross-lingual language model pretraining. _arXiv preprint arXiv:1901.07291_, 2019. * Lample et al. (2017) Guillaume Lample, Alexis Conneau, Ludovic Denoyer, and Marc'Aurelio Ranzato. Unsupervised machine translation using monolingual corpora only. _arXiv preprint arXiv:1711.00043_, 2017. * Lan et al. (2019) Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, and Radu Soricut. Albert: A lite bert for self-supervised learning of language representations. _arXiv preprint arXiv:1909.11942_, 2019. * Lample et al. (2019)Zachary C Lipton and Jacob Steinhardt. Troubling trends in machine learning scholarship. _arXiv preprint arXiv:1807.03341_, 2018. * Liu and Lapata (2019) Yang Liu and Mirella Lapata. Text summarization with pretrained encoders. _arXiv preprint arXiv:1908.08345_, 2019. * Moldovan et al. (2000) Dan Moldovan, Sanda Harabagiu, Marius Pasca, Rada Mihalcea, Roxana Girju, Richard Goodrum, and Vasile Rus. The structure and performance of an open-domain question answering system. In _Proceedings of the 38th annual meeting of the Association for Computational Linguistics_, pages 563-570, 2000. * Radford et al. (2018) Alec Radford, Karthik Narasimhan, Tim Salimans, Ilya Sutskever, et al. Improving language understanding by generative pre-training. 2018. * Radford et al. (2019) Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language models are unsupervised multitask learners. _OpenAI blog_, 1(8):9, 2019. * Raffel et al. (2020) Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. _The Journal of Machine Learning Research_, 21(1):5485-5551, 2020. * Rajpurkar et al. (2016) Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions for machine comprehension of text. _arXiv preprint arXiv:1606.05250_, 2016. * Shoeybi et al. (2019) Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan Catanzaro. Megatron-lm: Training multi-billion parameter language models using model parallelism. _arXiv preprint arXiv:1909.08053_, 2019. * Strubell et al. (2019) Emma Strubell, Ananya Ganesh, and Andrew McCallum. Energy and policy considerations for deep learning in nlp. _arXiv preprint arXiv:1906.02243_, 2019. * Vaswani et al. (2017) Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In _Advances in neural information processing systems_, pages 5998-6008, 2017. * Voorhees et al. (1999) Ellen M Voorhees et al. The trec-8 question answering track report. In _Trec_, volume 99, pages 77-82. Citeseer, 1999. * Yun et al. (2020) Chulhee Yun, Yin-Wen Chang, Srinadh Bhojanapalli, Ankit Singh Rawat, Sashank Reddi, and Sanjiv Kumar. O (n) connections are expressive enough: Universal approximability of sparse transformers. _Advances in Neural Information Processing Systems_, 33:13783-13794, 2020. * Zaheer et al. (2020) Manzil Zaheer, Guru Guruganesh, Kumar Avinava Dubey, Joshua Ainslie, Chris Alberti, Santiago Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, et al. Big bird: Transformers for longer sequences. _Advances in Neural Information Processing Systems_, 33:17283-17297, 2020. * Zhang et al. (2018) Lei Zhang, Shuai Wang, and Bing Liu. Deep learning for sentiment analysis: A survey. _Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery_, 8(4):e1253, 2018."
    }
  ]
}