<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Comparative Analysis of Distributed Training Strategies for GPT-2</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability  status="unknown">
					<licence/>
				</availability>
				<date type="published" when="2024-05-24">24 May 2024</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Ishan</forename><surname>Patwardhan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">COEP Technological University</orgName>
								<address>
									<addrLine>Wellesley Road</addrLine>
									<postCode>411005</postCode>
									<settlement>Pune</settlement>
									<region>Maharashtra</region>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shubham</forename><surname>Gandhi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">COEP Technological University</orgName>
								<address>
									<addrLine>Wellesley Road</addrLine>
									<postCode>411005</postCode>
									<settlement>Pune</settlement>
									<region>Maharashtra</region>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Om</forename><surname>Khare</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">COEP Technological University</orgName>
								<address>
									<addrLine>Wellesley Road</addrLine>
									<postCode>411005</postCode>
									<settlement>Pune</settlement>
									<region>Maharashtra</region>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Amit</forename><surname>Joshi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">COEP Technological University</orgName>
								<address>
									<addrLine>Wellesley Road</addrLine>
									<postCode>411005</postCode>
									<settlement>Pune</settlement>
									<region>Maharashtra</region>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Suraj</forename><surname>Sawant</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">COEP Technological University</orgName>
								<address>
									<addrLine>Wellesley Road</addrLine>
									<postCode>411005</postCode>
									<settlement>Pune</settlement>
									<region>Maharashtra</region>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Comparative Analysis of Distributed Training Strategies for GPT-2</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2024-05-24">24 May 2024</date>
						</imprint>
					</monogr>
					<idno type="MD5">CEE199B3E049DCF9015DAE0E6A8F28D7</idno>
					<idno type="arXiv">arXiv:2405.15628v1[cs.DC]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.2-SNAPSHOT" ident="GROBID" when="2025-04-29T15:39+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<label type="revision">92ea31e</label>
					<label type="parameters">startPage=-1, endPage=-1, consolidateCitations=1, consolidateHeader=1, consolidateFunders=0, includeRawAffiliations=false, includeRawCitations=false, includeRawCopyrights=false, generateTeiIds=false, generateTeiCoordinates=[], flavor=null</label>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Distributed Training</term>
					<term>Fully Sharded Data Parallel</term>
					<term>Graphics Processing Unit</term>
					<term>Distributed Data-Parallel</term>
					<term>Large Language Models</term>
					<term>Optimization</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The rapid advancement in Large Language Models has been met with significant challenges in their training processes, primarily due to their considerable computational and memory demands. This research examines parallelization techniques developed to address these challenges, enabling the efficient and scalable training of Large Language Models. A comprehensive analysis of both data and model parallelism strategies, including Fully Sharded Data Parallelism and Distributed Data Parallel frameworks, is provided to assess methods that facilitate efficient model training. Furthermore, the architectural complexities and training methodologies of the Generative Pre-Trained Transformer-2 model are explored. The application of these strategies is further investigated, which is crucial in managing the substantial computational and memory demands of training sophisticated models. This analysis not only highlights the effectiveness of these parallel training strategies in enhancing training efficiency but also their role in enabling the scalable training of large language models. Drawing on recent research findings, through a comprehensive literature review this research underscores the critical role of parallelization techniques in addressing the computational challenges of training state-of-the-art Large Language Models, thereby contributing to the advancement of training more sophisticated and capable artificial intelligence systems.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The development of large language models (LLMs) represents a significant milestone in the field of natural language processing, showcasing remarkable capabilities in understanding, generating, and translating human language. As these models grow in size and complexity, they encounter substantial computational and memory challenges that impede their training and deployment. The scalability and efficiency of training these models have become critical issues, necessitating the exploration of innovative parallelization techniques.</p><p>This research delves into the realm of parallel training strategies, specifically examining Fully Sharded Data Parallel (FSDP) and Distributed Data Parallel (DDP) methods. These approaches offer potential pathways to mitigate the computational demands of training LLMs by distributing the workload across multiple processing units. By evaluating these strategies in the context of training the Generative Pre-Trained Transformer-2 model (GPT-2) model, this research aims to uncover insights that can further the efficient and scalable development of LLMs.</p><p>The computational hurdles associated with LLM training are not insurmountable. Recent advancements have laid the groundwork for overcoming these challenges through various parallelization strategies <ref type="bibr" target="#b0">[1]</ref>. For instance, the introduction of FSDP and DDP has marked a significant step towards enhancing the training efficiency of LLMs <ref type="bibr" target="#b1">[2]</ref> <ref type="bibr" target="#b2">[3]</ref>. These techniques, by distributing the training process across multiple Graphics processing units (GPUs) or nodes, promise to alleviate the bottlenecks of computational resources and memory constraints <ref type="bibr" target="#b3">[4]</ref>.</p><p>Moreover, the role of GPU computing has become increasingly pivotal in the training of LLMs <ref type="bibr" target="#b4">[5]</ref>. The capabilities of GPUs to perform parallel operations have opened new avenues for accelerating the training process, making it feasible to train larger models within reasonable timeframe. This is complemented by innovative techniques such as dense-and-sparse quantization <ref type="bibr" target="#b5">[6]</ref> <ref type="bibr" target="#b6">[7]</ref>, which aim to reduce the computational load while preserving the model's performance.</p><p>The exploration of hybrid parallelization strategies further illustrates the ongoing efforts to optimize LLM training. These strategies combine the strengths of data and model parallelism to improve training throughput <ref type="bibr" target="#b7">[8]</ref>. Additionally, the advancements in dynamic memory management and the development of frameworks like PyTorch's FSDP highlight the continuous evolution of tools and methods to support the efficient training of LLMs <ref type="bibr" target="#b8">[9]</ref>.</p><p>The following sections of this research are organized as follows: The literature review discusses various techniques for training large language models. It then reviews different training techniques by exploring their architecture and algorithm to implement those techniques. This is followed by the methodology where the framework for evaluating LLMs is stated. The metrics obtained are then used for evaluating different training techniques in the results section. This is followed by conclusion and future scope.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Problem Statement</head><p>The advancement of generative artifical intelligence (AI), underscored by the development of LLMs such as GPT-2, has notably enhanced capabilities in natural language processing, including language understanding, generation, and translation. However, the training of these models is challenged by their significant computational and memory demands. To address these challenges, innovative solutions are required to ensure the feasibility and efficiency of their development. The focus on the development and optimization of LLMs has led to the exploration of data parallelization techniques, notably FSDP and DDP. These techniques have been identified as efficient methods for distributing the training workload across multiple GPUs and computational nodes, thereby contributing to enhanced training efficiency and scalability. <ref type="bibr" target="#b9">[10]</ref> <ref type="bibr" target="#b10">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Motivation</head><p>The motivation behind this research stems from the need to address the computational bottlenecks inherent in LLM training. Traditional single-GPU training methods are increasingly inadequate for models of this scale, leading to prohibitive training times and resource demands. This situation calls for advanced parallelization techniques that can distribute the training workload across multiple GPUs and computational nodes, thereby enhancing training efficiency and scalability.</p><p>This research aims to explore and compare various distributed training strategies, specifically focusing on FSDP and DDP frameworks, to identify the most effective methods for training LLMs like GPT-2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Objectives</head><p>The objectives of this research are intricately woven around the core aim of enhancing the training efficiency of LLMs like GPT-2 through the utilization of FSDP and DDP strategies. Central to this research is the analysis of key performance metrics-training time, memory usage, throughput, loss, and grad norm-to discern the impact of these parallelization techniques on the training dynamics. By meticulously evaluating these metrics, this research aspires to unearth the parallelization method that strikes an optimal balance between speed and resource efficiency. Furthermore, as LLMs evolve in size and complexity, understanding the scalability of FSDP and DDP becomes paramount. This research delves into the capacity of these strategies to support larger models without causing detrimental effects on training effectiveness or efficiency. Additionally, this research extends the inquiry to the ramifications of these strategies on the model's performance, with a particular focus on learning capabilities across epochs. This comprehensive analysis aims not only to shed light on the efficiency and scalability of FSDP and DDP but also to guide the selection of the most fitting distributed training strategy, thereby facilitating more effective and accessible LLM training. Through a comparative analysis of non-distributed training, FSDP, and DDP, this research serves as a guide in selecting the most appropriate distributed training strategy for LLM training.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Literature Review</head><p>In LLMs and GPU computing, significant advancements have been observed, primarily aimed at enhancing the efficiency and scalability of models. The implementation of dense-and-sparse quantization methods has been particularly noteworthy, as these techniques have been demonstrated to effectively reduce computational demands while maintaining the integrity of model outputs <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref>. A balance has been achieved between minimizing computational load and preserving high-quality outcomes, which is essential for the deployment of sophisticated LLMs in resource-constrained environments.</p><p>The domain has also been enriched by the development of strategies aimed at optimizing the throughput of generative inference using GPUs. Innovative approaches that enable the efficient execution of complex language tasks, even within the limitations of single-GPU setups, have been highlighted <ref type="bibr" target="#b13">[14]</ref>. The significance of these optimizations in expanding the practical deployment of LLMs and ensuring robust performance despite resource limitations has been underscored <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b15">16]</ref>.</p><p>Moreover, the exploration of hybrid parallelization strategies has revealed their potential to significantly improve training throughput. The combination of data and model parallelism within these strategies has been shown to offer a viable solution to accelerate the training of deep neural networks, including LLMs <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b17">18]</ref>. These methods have paved the way for the development of more advanced training regimes that are capable of adapting to the specific requirements of the training process.</p><p>Additionally, the focus on acceleration methods tailored specifically to the training of convolutional neural networks (CNNs) has provided further insights into the optimization of parallel training processes. The importance of strategic resource allocation and efficient scheduling in reducing training times has been emphasized, with valuable lessons being applicable to the training scenarios of LLMs <ref type="bibr" target="#b18">[19]</ref>. The diversity of parallelization strategies for neural network training and their contribution to enhancing training efficiency and scalability has also been examined <ref type="bibr" target="#b19">[20]</ref>.</p><p>Predictive pipelining techniques have been introduced as an effective solution to the compute-latency trade-off, which is a critical consideration in real-time applications of LLMs. These techniques have been designed to optimize the decoding process, ensuring the timely delivery of high-performance outputs <ref type="bibr" target="#b20">[21]</ref>. The need for models to be both efficient and contextually aware, particularly in the context of LLMbased machine translation, has been highlighted through the integration of cultural awareness, emphasizing the nuanced challenges of LLM training <ref type="bibr" target="#b21">[22]</ref>.</p><p>Sparse-quantized representations have been investigated, offering a pathway to near-lossless weight compression and significantly reducing the resources needed for storage and computation <ref type="bibr" target="#b22">[23]</ref>. This advancement has been recognized as addressing a critical bottleneck in LLM deployment, enabling improved model performance without a substantial increase in resource requirements.</p><p>The challenge of GPU idleness has been addressed through the development of optimized data-loader mechanisms, which have been shown to significantly reduce GPU idleness, thus optimizing the utilization and throughput of computational resources <ref type="bibr" target="#b23">[24]</ref>. These optimizations are crucial in ensuring consistent GPU engagement and enhancing the overall efficiency of computational operations.</p><p>As advancements continue, there has been a shift towards refining the synergies between LLMs and GPU computing. Efforts to develop more adaptable and efficient frameworks for both the training and inference phases of LLMs have been indicative of this trend <ref type="bibr" target="#b24">[25]</ref>. These efforts are aimed at enhancing the capabilities and applications of LLMs, promising significant contributions to the field.</p><p>Despite notable progress, a discernible research gap has been identified in the creation of universal frameworks that facilitate seamless learning transfer across different LLMs. This gap is particularly evident in multi-modal applications that necessitate the integration of textual and visual data, marking an area ripe for future exploration.</p><p>In summary, the integration of GPU computing with LLMs, through advanced parallel data loading and quantization techniques, has established a fertile ground for addressing the computational challenges associated with training and deploying these models. The literature emphasizes the need for continued innovation to fully realize the potential of LLMs across a wide range of artificial intelligence applications, acknowledging the commendable advancements made to date.</p><p>In the contemporary landscape of high-performance computing (HPC) and deep learning, significant advancements have been propelled by a suite of pioneering research endeavors in the training of distributed deep neural networks (DNNs) on modern GPU-based clusters. The evolution of Accelerated Data-Parallel Distributed DNN Training methodologies has been marked by a paradigm shift towards optimizing data parallelism in GPU environments. This technique, characterized by its strategic implementation of asynchronous communication and refined data sharding protocols, has been demonstrated to effectively address the prevalent bottlenecks encountered in large-scale DNN training endeavors. Consequently, a pathway has been paved for accelerated computational processes and enhanced model performance <ref type="bibr" target="#b25">[26]</ref>.</p><p>Concurrently, the development of an Asynchronous Distributed Proximal Policy Optimization Training Framework has been recognized as another cornerstone, leveraging GPU architectures for the expeditious training of complex models, particularly within the realm of reinforcement learning. This framework has been distinguished by offering a scalable solution that significantly accelerates convergence rates, thereby facilitating more efficient model training processes <ref type="bibr" target="#b26">[27]</ref>.</p><p>Moreover, GPU-based machine learning strategies for the detection of botnet attacks have been explored, highlighting the versatility and robustness of GPUaccelerated frameworks in confronting and mitigating cybersecurity threats. A comprehensive approach leveraging the computational prowess of GPUs has been delineated to enhance real-time detection capabilities, significantly diminishing the susceptibility of networks to advanced cyber threats <ref type="bibr" target="#b27">[28]</ref>. Similarly, the investigation into machine learning-based autotuning of GPU-accelerated Computational Fluid Dynamics (CFD) codes has unveiled a promising pathway towards optimizing computational efficiency and accuracy in fluid dynamics simulations, underscoring the cross-disciplinary applicability of GPU-accelerated computational techniques <ref type="bibr" target="#b28">[29]</ref>.</p><p>The discourse on dynamic memory management for GPU-based training of deep neural networks has addressed a pivotal challenge within the domain of deep learning-memory bottlenecks. The introduction of innovative memory allocation and recycling strategies has aimed to facilitate the training of larger, more complex models on GPUs, contributing to the scalability and efficiency of deep learning endeavors <ref type="bibr" target="#b29">[30]</ref>. In parallel, the proposition of OSDP: Optimal Sharded Data Parallel for Distributed Deep Learning has introduced an optimized framework for data parallelism, seeking to ameliorate workload imbalances and minimize communication overhead in distributed deep learning frameworks <ref type="bibr" target="#b30">[31]</ref>.</p><p>The extension of these innovations to the training of Graph Neural Networks (GNNs) through scalable data-parallel distributed training techniques has elucidated the unique challenges and opportunities inherent in graph-based learning. This area of research has contributed to the advancement of GNN methodologies and exemplified the broader applicability and potential of distributed training frameworks across various facets of deep learning <ref type="bibr" target="#b31">[32]</ref>.</p><p>The integration of these research findings into the training of LLMs has opened new vistas in addressing the constraints currently faced in LLM training protocols. By harnessing the scalability, efficiency, and flexibility offered by these advanced distributed training frameworks, a tangible opportunity exists to diminish the computational and temporal demands associated with LLM development. This integration has also highlighted existing research gaps, such as the need for tailored optimization strategies to accommodate the distinct architectural and data requisites of LLMs.</p><p>In the pursuit of advancing the frontiers of artificial intelligence through LLMs, the research community has increasingly focused on the development and refinement of parallelization strategies to surmount the computational challenges inherent in training such expansive models. FSDP has emerged as a particularly promising approach, characterized by its innovative technique of partitioning model parameters across multiple GPUs to significantly reduce the per-device memory requirement. This method not only facilitates the scaling of model training processes but also enhances the feasibility of executing large-scale models on distributed computing environments <ref type="bibr" target="#b32">[33]</ref>.</p><p>The implementation of FSDP within the PyTorch framework has offered valuable insights into its practical application, revealing both the potential and the complexities of deploying such advanced parallelization techniques in real-world settings. Experiences gleaned from scaling PyTorch models using FSDP have underscored the critical role of efficient communication protocols, particularly through the adoption of compression-assisted all-gather and reduce-scatter operations. These protocols optimize the bandwidth consumption for parameter synchronization, a pivotal factor in maintaining training speed and efficiency across distributed systems <ref type="bibr" target="#b33">[34]</ref>.</p><p>Furthermore, advancements in quantized distributed training have introduced quantization into the distributed training workflow, significantly reducing the computational resources required while providing convergence guarantees. Such guarantees ensure that the model's performance remains robust, addressing one of the primary concerns associated with quantization techniques <ref type="bibr" target="#b34">[35]</ref>. The successful training of a model with over a trillion parameters using FSDP on cloud platforms further exemplifies the scalability afforded by FSDP, demonstrating how leveraging cloud computing resources can make the training of previously inconceivable model sizes a reality <ref type="bibr" target="#b35">[36]</ref>.</p><p>The broader ecosystem of parallel and distributed training systems designed to support large models plays a crucial role in the practical application of FSDP. These systems provide the necessary infrastructure to accommodate the unique demands of FSDP, including the management of data flow and parameter synchronization across a distributed network <ref type="bibr" target="#b36">[37]</ref>. Optimizing multi-GPU parallelization strategies complements the core principles of FSDP by maximizing resource utilization and minimizing training times, thereby addressing the dual challenges of efficiency and scalability in LLM training.</p><p>The versatility of FSDP and related parallelization strategies extend beyond traditional neural networks to more specialized architectures, such as spiking neural networks, highlighting the adaptability of these strategies in meeting diverse computational and architectural requirements <ref type="bibr" target="#b37">[38]</ref>.</p><p>As the research community continues to navigate the complexities of training LLMs, the exploration and refinement of FSDP and analogous parallelization strategies represent a critical area of focus. The collective insights from recent studies underscore the significance of these strategies in overcoming the computational barriers to LLM training. Looking forward, the evolution of FSDP, alongside advances in communication protocols, quantization techniques, and system infrastructure, is poised to drive further breakthroughs in the training of LLMs. This ongoing research not only enhances understanding of efficient model training but also paves the way for the development of more sophisticated, capable, and accessible AI systems, heralding a new era in artificial intelligence research and application.</p><p>In essence, advancement in GPU computing steers towards more intricate and competent methods for managing large-scale models. The significance of strategies like quantization, parameter sharding, and the development of optimized distributed training systems is underscored. These breakthroughs not only enhance the capabilities of current hardware technologies but also open new avenues for applications and innovations in deep learning and AI domains with hardware constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Review of Training Techniques</head><p>This section of the research includes a comprehensive exploration of contemporary strategies employed in the training of deep learning models, with a focus on the distinct methodologies of Single GPU Training, FSDP, and DDP. Each approach presents unique advantages and challenges, from the simplicity and accessibility of Single GPU Training, conducive to smaller-scale models and rapid prototyping, to the sophisticated memory efficiency and scalability offered by FSDP and DDP for accommodating larger models and datasets. This section delves into the operational intricacies and comparative benefits of these techniques, highlighting their pivotal roles in overcoming the computational and memory constraints inherent in the training of advanced deep learning models, thereby shaping the future of model development and training efficiency</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Single GPU Training</head><p>Single GPU training is characterized by its simplicity and direct approach, where the entire model and data reside on a single GPU, avoiding the complexities of distribution across multiple devices. This strategy does not involve the partitioning of model parameters or the synchronization of gradients across different GPUs, which are common in parallel training strategies like FSDP and DDP.</p><p>In the Single GPU approach, the model undergoes both the forward and backward passes entirely within one GPU, making it straightforward but constrained by the memory and computational capacity of the single GPU in use. This can limit the size of the model and the batch that can be processed, potentially leading to longer training times compared to distributed methods. However, for smaller models or when computational resources are limited, Single GPU training provides an accessible and uncomplicated pathway to model development and training.</p><p>The absence of the need for gradient synchronization across devices, as seen in DDP, or the sharding of parameters, as required in FSDP, simplifies the training process. However, it also places the entire computational burden and memory demand on a single GPU, which may necessitate careful management of model complexity and batch sizes to prevent memory overflow and ensure efficient training.</p><p>Despite its limitations in scalability and efficiency for larger models, Single GPU training remains a valuable approach, particularly for development, testing, and smaller-scale applications. It allows for rapid prototyping and debugging without the overhead of more complex distributed systems, providing a vital role in the ecosystem of deep learning training strategies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Fully Sharded Data Parallel</head><p>FSDP has been designed as a parallel training strategy to address the challenges of memory constraints and to optimize the scalability of deep learning models across multiple GPUs. Challenges are often faced by traditional parallel training methods, such as Data Parallelism, when large models and datasets are involved, primarily due to the memory limitations on individual GPUs. By sharding the model's parameters, gradients, and optimizer states across all available GPUs, FSDP effectively distributes the computational workload and memory usage, as can be seen in the implementation of FSDP class in PyTorch <ref type="bibr" target="#b38">[39]</ref>. The architecture of FSDP is depicted in Figure <ref type="figure" target="#fig_0">1</ref>.</p><p>In the FSDP approach, model parameters are divided into shards, each located on a different GPU. Each GPU, during the forward pass, processes a portion of the input data and computes local gradients with respect to its shard of parameters. These local gradients are then synchronized across all GPUs during the backward pass, leading to the update of each shard of parameters with the collective gradients. This ensures the maintenance of consistent model states across all GPUs and the collective learning from the same global gradients. The significant reduction in the memory footprint on each GPU is one of FSDP's key advantages. The distribution of parameters across multiple GPUs divides the memory requirement for storing model parameters, enabling larger models to be accommodated within the available GPU memory. Additionally, FSDP facilitates the training of models with larger batch sizes, potentially leading to improved convergence and efficiency.</p><p>The employment of mixed precision training and gradient accumulation techniques by FSDP further enhances memory efficiency and scalability. Mixed precision training reduces memory usage by utilizing lower precision floating-point formats for certain computations without compromising training accuracy. Gradient accumulation, on the other hand, aggregates gradients over multiple iterations, allowing for larger effective batch sizes without increasing memory consumption <ref type="bibr" target="#b39">[40]</ref>.</p><p>The benefits offered by FSDP include:</p><p>1. Reduced memory overhead is achieved through the sharding of model parameters across GPUs, minimizing the memory required on each GPU and enabling the training of larger models with larger batch sizes <ref type="bibr" target="#b32">[33]</ref>. 2. Scalability is enhanced, allowing deep learning models to scale across multiple GPUs and accommodate larger models and datasets without encountering memory limits <ref type="bibr" target="#b40">[41]</ref>. 3. Flexibility is provided, allowing FSDP to be applied to a wide range of model architectures without significant modifications to the model code, making it suitable for various deep learning tasks <ref type="bibr" target="#b32">[33]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Distributed Data Parallel</head><p>DDP has been widely adopted as a parallel training technique, distributing the training process across multiple GPUs, typically within the same node or across multiple nodes in a distributed computing environment <ref type="bibr" target="#b41">[42,</ref><ref type="bibr" target="#b42">43]</ref>. In DDP, a complete replica of the model is maintained on each GPU, with the input data being divided into mini-batches and distributed among the GPUs for parallel processing.</p><p>During the forward pass, the forward activations and loss for its mini-batch of data are independently computed by each GPU. These local losses are aggregated across all GPUs, with the resulting global loss being used to compute gradients during the backward pass. Gradients are then synchronized across all GPUs by DDP, and the model parameters are collectively updated using techniques such as AllReduce, as demonstrated by the pseudo algorithm employed in PyTorch's implementation of DDP <ref type="bibr" target="#b43">[44]</ref>.</p><p>The efficient gradient synchronization mechanism is highlighted as a key feature of DDP. The optimization of gradient communication across GPUs by DDP aims to minimize synchronization overhead, leveraging asynchronous gradient updates and gradient compression techniques. This ensures consistent updates to the model parameters across each GPU, leading to quicker convergence and enhanced training speed.</p><p>Ease of use and scalability are also notable attributes of DDP. Its integration into existing training pipelines is facilitated by its straightforward implementation,</p><p>Algorithm 1 DistributedDataParallel Require: Process rank r, bucket size cap c, local model net 1: function constructor(net) 2: if r = 0 then 3: broadcast net states to other processes 4: end if 5: init buckets, allocate parameters to buckets in the reverse order of net.parameters() 6: for p in net.parameters() do 7: acc ← p.grad accumulator 8: acc → add post hook(autograd hook) 9: end for 10: end function 11: function forward(inp) 12: out ← net(inp) 13: traverse autograd graph from out and mark unused parameters as ready 14: return out 15: end function 16: function autograd hook(param index) 17: get bucket b i and bucket offset using param index 18: get parameter var using param index 19: view ← b i .narrow(offset, var.size()) 20: view.copy (var.grad) 21: if all grads in b i are ready then 22: mark b i as ready 23: end if 24: launch AllReduce on ready buckets in order 25: if all buckets are ready then 26: block waiting for all AllReduce ops 27: end if 28: end function requiring minimal modifications to the model or training code. Furthermore, DDP's scalability is evident as it accommodates the increasing number of GPUs, enabling deep learning models to utilize growing computational resources for expedited training times.</p><p>Challenges may arise with DDP when large models or datasets are involved, as the necessity for each GPU to store a complete replica of the model can result in memory constraints. Additionally, the effectiveness of DDP might be impacted by factors such as communication bandwidth and network latency in distributed computing environments.</p><p>In summary, the features offered by DDP include:</p><p>1. Efficient Gradient Synchronization: The communication of gradients across GPUs is optimized by DDP, diminishing the time dedicated to synchronization and enhancing the overall training speed. 2. Ease of Use: The implementation and integration of DDP into existing training pipelines are facilitated by its straightforward nature, necessitating minimal alterations. 3. Scalability: The well-scaling nature of DDP with the increasing number of GPUs allows for quicker training times as computational resources grow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Proposed Methodology</head><p>The methodology section delineates a comprehensive framework for the empirical evaluation of LLMs training efficiency for advanced parallelization strategies. Anchored by a rigorous experimental setup, this section meticulously outlines the implementation nuances of the GPT-2 model, leveraging state-of-the-art hardware and software configurations to harness the full potential of parallel processing capabilities. Through a detailed exposition of the model architecture, inclusive of embeddings, layer normalization, attention mechanisms, and feed-forward networks. This research establishes a solid foundation for the subsequent exploration of distributed training paradigms.</p><p>Focusing the research on the DDP and FSDP strategies, each scrutinized for their efficacy in optimizing training workflows across multiple GPUs. This inquiry is complemented by a juxtaposition with non-distributed, single-GPU training approaches, offering a holistic view of the scalability and efficiency trade-offs inherent in each method. The methodology is further enriched by an in-depth description of the "All the News" dataset. This dataset's diversity and breadth provide a robust testing ground for assessing the adaptability and performance of LLMs across a spectrum of linguistic contexts.</p><p>By integrating detailed implementation specifics with a strategic evaluation of training strategies, the methodology section aims to furnish a nuanced understanding of the operational dynamics at play in the optimization of LLM training.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Experimental Setup</head><p>The experiments for optimizing LLM training with advanced parallelization strategies were conducted on a system running Linux with Debian x86 64 GNU/Linux as the operating system. The machine was equipped with 2 Nvidia T4 GPUs for efficient parallel processing. In terms of the central processing unit (CPU), an Intel(R) Xeon(R) CPU @ 2.30GHz with 16 cores and a clock speed of 2300 MHz was utilized. These GPUs were chosen for their parallel processing capabilities, which significantly expedited the training process of the GPT-2 model <ref type="bibr" target="#b44">[45]</ref>. The software environment was configured using Python as the primary programming language, with PyTorch serving as the deep learning framework. Additionally, the Transformers library was leveraged for model components and utilities, while Torch Distributed facilitated the implementation of parallel training strategies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Implementation details</head><p>The GPT-2 <ref type="bibr" target="#b45">[46]</ref> configuration consisted of a 768-dimensional model with a vocabulary size of 50,257 tokens. It included 12 attention heads, each with a 64-dimensional head, a 3072-dimensional feed-forward network, and 12 transformer layers. The model components were as follows:</p><p>1. Embeddings: Token and positional embeddings were initialized to represent input tokens and their positions within a sequence, respectively. These embeddings were then combined to form the initial input representation for the transformer layers. 2. Layer Normalization: Implemented to stabilize the inputs to various components of the transformer layers, improving training efficiency and convergence. 3. Attention Mechanism: The model employed a scaled dot-product attention mechanism with a causal mask to ensure that predictions for a token could only attend to earlier tokens in the sequence, preserving the autoregressive property. 4. Feed-Forward Network: Each transformer block contained a two-layer MLP with GELU activation, enhancing the model's ability to capture complex relationships in the data.</p><p>The GPT-2 model comprises N Transformer decoder blocks, illustrated in the figure below. Each decoder block consists of components such as a multi-head masked attention layer, a multilayer perceptron layer, normalization, and dropout layers. Utilizing residual connections (represented by branching lines to the addition operator), the block can leverage the input from the previous block. The multi-head masked attention layer (right panel) computes attention scores by employing Q, K, and V vectors to capture the sequential relationships within the input sequence. <ref type="bibr" target="#b46">[47]</ref> Illustrated in Figure <ref type="figure" target="#fig_1">2</ref>, the input is divided among four separate attention heads. Each head independently processes the input sequence, creating three unique vectors: the query (Q), the key (K), and the value (V). These vectors are then utilized to compute the attention scores using the formula:</p><formula xml:id="formula_0">A(Q, K, V ) = softmax QK T √ d k V<label>(1)</label></formula><p>where A represents the matrix of attention scores, Q is the query vector, K transpose is present which is the transpose of the key vector, V is the value vector, and d indicates the size of the Q and K vectors. The Q vector is associated with the current moment in the input sequence, while K encompasses information across all moments within the sequence. The multiplication of Q and K transpose determines the level of similarity or relationship between different moments in the sequence, allowing the model to focus on the most pertinent sections of the data. The V vector contains the information that the model pays attention to and is employed in creating the output. Following the calculation of attention scores, the various heads are combined through concatenation within a final linear layer, leading to the formation of the overall attention matrix output. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Data Description</head><p>The "All the News" dataset was used for training the LLMs using different training strategies namely FSDP, and DDP. The dataset consists of news articles from 15 American publications, with a time range primarily between 2016 and July 2017.</p><p>The "All the News" dataset, with its extensive collection of 143,000 news articles from 15 American publications, provides a rich resource for training LLMs due to its diverse content, spanning various topics, writing styles, and perspectives. Training LLMs like GPT models involve several stages, where a dataset like this can be particularly useful. Here's how it can be applied: 1. Data Preprocessing Before using the dataset for training, it's crucial to preprocess the text to make it suitable for machine learning algorithms. This involves: Cleaning: Removing unnecessary elements like HTML tags, special characters, and formatting. Tokenization: Breaking down the text into tokens (e.g., words or subwords) that serve as the basic units for model training. Normalization: Standardizing text by lowercasing, stemming, or lemmatization to reduce the variation of tokens.</p><p>2. Vocabulary Building From the preprocessed text, a vocabulary is constructed, listing all unique tokens that appear in the dataset. This vocabulary is crucial for converting text into numerical form that models can understand. For LLMs, dealing with a large vocabulary efficiently is key to handling diverse datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Training Data Preparation</head><p>The dataset is divided into segments (e.g., sentences or paragraphs) that are used for training. Each segment is paired with a target outcome, which, in the case of LLMs, is often the next token in the sequence. This trains the model to predict the likelihood of each token given the preceding context. 4. Model Training During training, the LLM learns to understand patterns, contexts, and relationships between tokens in the dataset. It involves adjusting the model's parameters to minimize the difference between the predicted and actual outcomes. For a dataset like "All the News," the model learns from a wide variety of linguistic features, including syntax, semantics, and the use of language in different contexts (e.g., political, economic, cultural). 5. Fine-tuning for Specific Tasks After the initial training on a broad dataset, LLMs can be fine-tuned on smaller, task-specific datasets. This step adjusts the model to perform well on particular applications, such as sentiment analysis, summarization, or question answering. The diverse content of the "All the News" dataset makes it an excellent resource for initial broad training, providing a foundation that can be refined for various specific tasks.</p><p>The diverse and extensive nature of the "All the News" dataset allows for training LLMs that are robust and versatile, capable of understanding and generating text across a wide range of topics and styles. The dataset's variety in political alignment, publication medium, and subject matter can help mitigate model biases by exposing the model to a wide range of viewpoints and writing styles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3">Performance Metrics</head><p>To assess the effectiveness of the DDP and FSDP training strategies, the following metrics were recorded: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results and Discussion</head><p>This section presents the results, comparing different training methods over metrics such as training time, throughput, gradient normalization, memory usage, and loss, namely FSDP, DDP, and traditional non-distributed single GPU training approaches. The experiments were conducted on a high-performance computing system under a Linux environment, specifically Debian x86 64 GNU/Linux. The hardware setup included dual Nvidia T4 GPUs, known for their efficient parallel processing capabilities, alongside an Intel(R) Xeon(R) CPU @ 2.30GHz, boasting 16 cores and a clock speed of 2300 MHz, to ensure robust computational support.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Throughput</head><p>Throughput, in the context of GPU training, refers to the amount of data processed per unit of time. It's a critical performance metric, especially in large-scale training tasks, as it directly impacts the efficiency and speed of the learning process. Findings indicate that both DDP and Single GPU configurations maintained a relatively stable throughput across training epochs. Notably, the Single GPU setup consistently achieved a marginally higher throughput compared to DDP, highlighting its efficiency in less complex computational tasks. However, FSDP was observed to have the lowest throughput, suggesting a slower data processing rate which might be attributed to the overhead introduced by data sharding and communication across shards.</p><p>Throughput is defined as the amount of data processed per unit of time. Mathematically, it can be expressed as:</p><formula xml:id="formula_1">Throughput = Total tokens Training time<label>(2)</label></formula><p>In conclusion from Figure <ref type="figure" target="#fig_3">3</ref>:</p><p>• DDP and Single GPU strategies show relatively stable throughput across epochs, with Single GPU generally achieving higher throughput compared to DDP. • FSDP demonstrates the lowest throughput, suggesting it processes data slower than the other two strategies. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Gradient Normalization</head><p>Gradient normalization is a technique used to stabilize the training process by scaling the gradients to a range, thereby preventing issues like gradient explosion or vanishing gradients. Analysis showed that all training strategies experienced fluctuations in gradient norms across epochs, which is indicative of variability in training stability. The Single GPU approach, in particular, displayed more significant peaks in gradient norms, hinting at a less stable gradient update process compared to the more distributed approaches like DDP and FSDP. This finding underscores the potential benefits of distributed training methods in maintaining training stability.</p><formula xml:id="formula_2">∇L normalized = ∇L ∥∇L∥ 2<label>(3)</label></formula><p>where ∇L represents the gradients of the loss function L with respect to the model parameters.</p><p>In conclusion from Figure <ref type="figure" target="#fig_4">4</ref>:</p><p>• All strategies exhibit fluctuations in gradient norm across epochs, indicating variations in training stability. • Single GPU shows higher peaks, suggesting less stability in gradient updates compared to DDP and FSDP. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Training Time</head><p>Training time per epoch is a straightforward yet vital metric, reflecting the overall efficiency of the training process. The Single GPU method exhibited the longest training times per epoch, suggesting it is less efficient for complex computational tasks compared to its distributed counterparts. On the other hand, DDP and FSDP showed more competitive training times, with FSDP occasionally outperforming DDP. This can be attributed to FSDP's sharded approach, which, despite its lower throughput, can lead to time savings by optimizing memory usage and reducing inter-node communication overhead. In conclusion from Figure <ref type="figure" target="#fig_5">5</ref>:</p><p>• Single GPU has the longest training time per epoch, indicating it's the slowest strategy among the three. • DDP and FSDP have lower and more comparable training times, with FSDP slightly outperforming DDP in some epochs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Memory Usage</head><p>Memory usage is a critical factor in large-scale training tasks, dictating the maximum model size and batch size that can be accommodated. Observations revealed that FSDP demonstrated the most efficient memory usage, maintaining the lowest memory footprint across all epochs. This efficiency is inherent to the sharded data parallel approach, which partitions the model and data across multiple GPUs, thereby minimizing the memory load on individual devices. DDP, while more efficient than Single GPU, still consumed more memory than FSDP. The Single GPU setup, expectedly, had the highest memory consumption due to the lack of workload distribution. In conclusion from Figure <ref type="figure" target="#fig_6">6</ref>:</p><p>• FSDP shows the most efficient memory usage, maintaining the lowest memory footprint across epochs. • DDP uses more memory than FSDP but less than Single GPU.</p><p>• Single GPU consumes the most memory, which might be due to not distributing the workload across multiple devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Loss</head><p>The reduction in loss over time is a fundamental indicator of the learning efficacy of a training method. Across all evaluated strategies, it is observed that there is a consistent decrease in loss values, confirming that learning is effectively occurring.</p><p>The initial loss values and the rate at which they decreased were remarkably similar across all strategies. This similarity suggests that, despite the observed differences in throughput, training time, and memory usage, each approach was capable of learning from the data effectively. • Loss decreases over time for all strategies, indicating learning is taking place.</p><p>• The initial loss values and the rate of decrease are similar across strategies, suggesting that despite differences in throughput, training time, and memory usage, all strategies are effectively learning from the data.</p><p>Comprehensive analysis across pivotal metrics-training time, throughput, gradient normalization, memory usage, and loss-reveals critical insights into the operational efficacy and scalability of these training paradigms.</p><p>A key revelation from the research is the nuanced trade-offs between throughput and computational efficiency. While the Single GPU setup demonstrated superior Fig. <ref type="figure">7</ref> Loss per Epoch throughput, suggesting an edge in handling less computationally intensive tasks, its elongated training times underscore a diminished efficiency for complex operations. This contrast is stark against the backdrop of FSDP's lower throughput, which, despite its slower data processing rate, achieves significant time savings by optimizing memory usage and minimizing communication overhead. Such findings underscore the importance of selecting a training strategy that aligns with the specific computational demands and scale of the task at hand.</p><p>Gradient normalization emerged as a pivotal factor in maintaining training stability, with distributed strategies like DDP and FSDP showcasing a more consistent gradient update process compared to the Single GPU approach. This stability is crucial for preventing issues like gradient explosion or vanishing gradients, which can derail the training process. The distributed methods' ability to stabilize training underscores their potential in handling larger, more complex models where training stability becomes increasingly challenging.</p><p>Memory usage, a critical determinant of model and batch size capabilities, was most efficiently managed by FSDP. Its sharded data parallel approach significantly reduces the memory footprint on individual GPUs, enabling the accommodation of larger models and batch sizes. This efficiency is particularly relevant in the era of ever-expanding model sizes, where memory constraints pose a significant bottleneck to scalability and innovation.</p><p>Despite the observed disparities from Table <ref type="table" target="#tab_1">1</ref> in throughput, training time, and memory usage, all strategies demonstrated a consistent decrease in loss values, affirming their effectiveness in facilitating learning. This consistency suggests that the choice of training strategy, while impactful on efficiency and scalability, does not compromise the model's learning capability. Each approach, with its unique set of advantages and limitations, offers a viable pathway to training LLMs, contingent on the specific requirements of the task. As distributed training evolves, it will be critical to AI advancements, aiding in the creation of more advanced models. This research contributes to that progress, aiding in the advancement of LLM applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Declarations</head><p>Conflict of interest: The authors do not have conflict of interest to declare. Funding: The authors have not received any funding support during experimentation of the work and writing of the manuscript. Ethics approval: This study does not violate and does not involve moral and ethical statement. Author's contributions: All authors con-tributed to the work conceptualization and devel-opment of solution. All authors read and approved the final manuscript.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1</head><label>1</label><figDesc>Fig. 1 Architecture of PyTorch's FSDP</figDesc><graphic coords="9,148.14,73.70,244.24,550.63" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2</head><label>2</label><figDesc>Fig. 2 GPT-2 Architecture</figDesc><graphic coords="14,124.60,73.70,370.61,354.44" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>1 .</head><label>1</label><figDesc>Training Loss: Monitored to gauge the model's learning progress epochs. 2. Memory Usage: Peak memory allocation on the GPUs was tracked to evaluate the memory efficiency of the parallel training strategies. 3. Training Time: The total time taken to complete the training process was measured, providing insights into the computational efficiency of DDP and FSDP. 4. Throughput: The throughput obtained in the case of different training strategies is compared 5. Grad Norm: The fluctuations in grad norm across training strategies are compared.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3</head><label>3</label><figDesc>Fig. 3 Throughput per Epoch</figDesc><graphic coords="17,100.07,73.70,370.62,248.70" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 4</head><label>4</label><figDesc>Fig. 4 Grad Norm per Epoch</figDesc><graphic coords="18,124.79,73.70,366.91,261.46" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5</head><label>5</label><figDesc>Fig. 5 Training Time per Epoch</figDesc><graphic coords="19,100.26,73.70,366.91,264.07" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 6</head><label>6</label><figDesc>Fig. 6 Memory usage per epoch</figDesc><graphic coords="20,124.79,73.70,366.89,262.07" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><graphic coords="21,100.26,73.71,366.90,247.27" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1</head><label>1</label><figDesc>Comparison of DDP, FSDP, and Single GPU TrainingThis research compares the efficacy of FSDP, DDP, and Single GPU methods for training LLMs. This research examines training time, throughput, gradient normalization, memory usage, and loss, identifying trade-offs for each approach.FSDP was notably efficient in memory usage, DDP balanced throughput and stability, and all strategies showed consistent learning via loss reduction. These insights enhance the understanding of LLM training dynamics and aid future model development and optimization efforts. It initiates further research into optimizing LLM computational resources and strategies, informing model training dynamics and parallelization strategy selection. This research is a baseline for enhancing LLM training efficiency and scalability, comparing FSDP, DDP, and Single GPU training. Further research could investigate adaptive parallelization for efficient training of larger models and hybrid approaches that integrate FSDP, DDP, and Single GPU methods for improved efficiency.</figDesc><table><row><cell>Metric</cell><cell>DDP</cell><cell>FSDP</cell><cell>Single GPU</cell></row><row><cell>Avg. Loss</cell><cell>9.907</cell><cell>10.05</cell><cell>8.979</cell></row><row><cell>Avg. Gradient Norm</cell><cell>1.404</cell><cell>0.919</cell><cell>4.664</cell></row><row><cell cols="3">Total Training Time (seconds) 1324.003 1655.907</cell><cell>2101.944</cell></row><row><cell>Avg. Memory Usage (MB)</cell><cell>4536.33</cell><cell>3816.28</cell><cell>4063.33</cell></row><row><cell>Avg. Throughput</cell><cell>2.266</cell><cell>1.992</cell><cell>2.854</cell></row><row><cell cols="2">6 Conclusion and Future scope</cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Consent for publication: All authors are aware of the publication of this manuscript and agreed to its publication.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Pytorch: An imperative style, highperformance deep learning library</title>
		<author>
			<persName><forename type="first">A</forename><surname>Paszke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Massa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lerer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bradbury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Chanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Killeen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gimelshein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Antiga</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in neural information processing systems</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Zero: Memory optimizations toward training trillion parameter models</title>
		<author>
			<persName><forename type="first">S</forename><surname>Rajbhandari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rasley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Ruwase</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC20: International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Shoeybi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Patwary</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Puri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Legresley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Casper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Catanzaro</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1909.08053</idno>
		<title level="m">Megatron-lm: Training multi-billion parameter language models using model parallelism</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Gpipe: Efficient training of giant neural networks using pipeline parallelism</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bapna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Firat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ngiam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><forename type="middle">V</forename><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in neural information processing systems</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">A</forename><surname>Harlap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Narayanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Phanishayee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Seshadri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Devanur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ganger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gibbons</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1806.03377</idno>
		<title level="m">Pipedream: Fast and efficient pipeline parallel dnn training</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Parallax: Sparsity-aware data parallel training of deep neural networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G.-I</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Ha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B.-G</forename><surname>Chun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourteenth EuroSys Conference</title>
		<meeting>the Fourteenth EuroSys Conference</meeting>
		<imprint>
			<date type="published" when="2019">2019. 2019</date>
			<biblScope unit="page" from="1" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Compressing dma engine: Leveraging activation sparsity for training deep neural networks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Rhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>O'connor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Chatterjee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pool</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">W</forename><surname>Keckler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Symposium on High Performance Computer Architecture (HPCA)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="78" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Beyond data and model parallelism for deep neural networks</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Aiken</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Machine Learning and Systems</title>
		<meeting>Machine Learning and Systems</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="1" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">C.-C</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-L</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-Y</forename><surname>Cheng</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1809.02839</idno>
		<title level="m">Efficient and robust parallel dnn training through model parallelism on multi-gpu platform</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Evaluating data-parallel distributed training strategies</title>
		<author>
			<persName><forename type="first">G</forename><surname>Ponnuswami</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kailasam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Dinesh</surname></persName>
		</author>
		<idno type="DOI">10.1109/COMSNETS53615.2022.9668349</idno>
		<ptr target="https://doi.org/10.1109/COMSNETS53615.2022.9668349" />
	</analytic>
	<monogr>
		<title level="m">2022 14th International Conference on Communication Systems &amp; Networks (COMSNETS)</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="759" to="763" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Optimizing multi-gpu parallelization strategies for deep learning training</title>
		<author>
			<persName><forename type="first">S</forename><surname>Pal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Ebrahimi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zulfiqar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Migacz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Nellans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Gupta</surname></persName>
		</author>
		<idno type="DOI">10.1109/MM.2019.2935967</idno>
		<ptr target="https://doi.org/10.1109/MM.2019.2935967" />
	</analytic>
	<monogr>
		<title level="j">IEEE Micro</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="91" to="101" />
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hooper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gholami</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Mahoney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Keutzer</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2306.07629[cs.CL]</idno>
		<title level="m">Squeezellm: Dense-and-sparse quantization</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<author>
			<persName><forename type="first">T</forename><surname>Dettmers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Belkada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2208.07339[cs.LG]</idno>
	</analytic>
	<monogr>
		<title level="m">-bit matrix multiplication for transformers at scale</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">8</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<author>
			<persName><forename type="first">Y</forename><surname>Sheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ryabinin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Barrett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Ré</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Zhang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2303.06865[cs.LG]</idno>
		<title level="m">Flexgen: High-throughput generative inference of large language models with a single gpu</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Dynamic stashing quantization for efficient transformer training</title>
		<author>
			<persName><forename type="first">G</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mullins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2303.05295[cs.LG]</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Acceleration method of convolutional neural network parallelization training</title>
		<author>
			<persName><forename type="first">Q</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Ruan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Training acceleration for deep neural networks: A hybrid parallelization strategy</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Li</surname></persName>
		</author>
		<idno type="DOI">10.1109/DAC18074.2021.9586300</idno>
		<ptr target="https://doi.org/10.1109/DAC18074.2021.9586300" />
	</analytic>
	<monogr>
		<title level="m">2021 58th ACM/IEEE Design Automation Conference (DAC)</title>
		<imprint>
			<date type="published" when="2021">2021</date>
			<biblScope unit="page" from="1165" to="1170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><surname>Ebrahimi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zulifqar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pal</surname></persName>
		</author>
		<title level="m">Parallelization strategies for training a neural network</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Predictive pipelined decoding: A compute-latency trade-off for exact llm decoding</title>
		<author>
			<persName><forename type="first">S</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Papailiopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2307.05908[cs.CL]</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Empowering llm-based machine translation with cultural awareness</title>
		<author>
			<persName><forename type="first">B</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2305.14328[cs.CL]</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Model-aware parallelization strategy for deep neural networks&apos; distributed training</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Dong</surname></persName>
		</author>
		<idno type="DOI">10.1109/CBD.2019.00021</idno>
		<ptr target="https://doi.org/10.1109/CBD.2019.00021" />
	</analytic>
	<monogr>
		<title level="m">Seventh International Conference on Advanced Cloud and Big Data (CBD)</title>
		<imprint>
			<date type="published" when="2019">2019. 2019</date>
			<biblScope unit="page" from="61" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Inference with reference: Lossless acceleration of large language models</title>
		<author>
			<persName><forename type="first">N</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Jiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Majumder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wei</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2304.04487[cs.CL]</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<author>
			<persName><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>He</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2307.09782[cs.LG]</idno>
		<title level="m">Zeroquant-fp: A leap forward in llms post-training w4a8 quantization using floating-point formats</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A data-loader tunable knob to shorten gpu idleness for distributed deep learning</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mi</surname></persName>
		</author>
		<idno type="DOI">10.1109/CLOUD55607.2022.00068</idno>
		<ptr target="https://doi.org/10.1109/CLOUD55607.2022.00068" />
	</analytic>
	<monogr>
		<title level="m">2022 IEEE 15th International Conference on Cloud Computing (CLOUD)</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="449" to="458" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Spqr: A sparse-quantized representation for near-lossless llm weight compression</title>
		<author>
			<persName><forename type="first">T</forename><surname>Dettmers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Svirschevski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Egiazarian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kuznedelev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Frantar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ashkboos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Borzunov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Hoefler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Alistarh</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2306.03078[cs.CL]</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Accdp: Accelerated data-parallel distributed dnn training for modern gpu-based hpc clusters</title>
		<author>
			<persName><forename type="first">N</forename><surname>Alnaasan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shafi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Subramoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">K</forename><surname>Panda</surname></persName>
		</author>
		<idno type="DOI">10.1109/HiPC56025.2022.00017</idno>
		<ptr target="https://doi.org/10.1109/HiPC56025.2022.00017" />
	</analytic>
	<monogr>
		<title level="m">2022 IEEE 29th International Conference on High Performance Computing, Data, and Analytics (HiPC)</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="32" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Asynchronous distributed proximal policy optimization training framework based on gpu</title>
		<author>
			<persName><forename type="first">C</forename><surname>Youlve</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Kaiyun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhaoyang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 2021 Chinese Intelligent Automation Conference</title>
		<editor>
			<persName><forename type="first">Z</forename><surname>Deng</surname></persName>
		</editor>
		<meeting>2021 Chinese Intelligent Automation Conference<address><addrLine>Singapore</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="618" to="626" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A gpu-based machine learning approach for detection of botnet attacks</title>
		<author>
			<persName><forename type="first">M</forename><surname>Motylinski</surname></persName>
		</author>
		<author>
			<persName><surname>Macdermott</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Iqbal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Shah</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.cose.2022.102918</idno>
		<ptr target="https://doi.org/10.1016/j.cose.2022.102918" />
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Security</title>
		<imprint>
			<biblScope unit="volume">123</biblScope>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Machine learning based autotuning of a gpu-accelerated computational fluid dynamics code</title>
		<author>
			<persName><forename type="first">W</forename><surname>Xue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Roy</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2306.14011[cs.PF]</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Dynamic memory management for gpu-based training of deep neural networks</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">B</forename></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename></persName>
		</author>
		<idno type="DOI">10.1109/IPDPS.2019.00030</idno>
		<ptr target="https://doi.org/" />
	</analytic>
	<monogr>
		<title level="m">IEEE International Parallel and Distributed Processing Symposium (IPDPS)</title>
		<imprint>
			<date type="published" when="2019">2019. 2019</date>
			<biblScope unit="page" from="200" to="209" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Osdp: Optimal sharded data parallel for distributed deep learning</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Miao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Nie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Cui</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2209.13258</idno>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Scalable data parallel distributed training for graph neural networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Koyama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Tatebe</surname></persName>
		</author>
		<idno type="DOI">10.1109/IPDPSW55747.2022.00121</idno>
		<ptr target="https://doi.org/10.1109/IPDPSW55747.2022.00121" />
	</analytic>
	<monogr>
		<title level="m">2022 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="699" to="707" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Varma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-C</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Shojanazeri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ott</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shleifer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Desmaison</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Balioglu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Damania</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Chauhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Mathews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Li</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2304.11277[cs.DC]</idno>
		<title level="m">Pytorch fsdp: Experiences on scaling fully sharded data parallel</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Accelerating distributed deep learning training with compression assisted allgather and reduce-scatter communication</title>
		<author>
			<persName><forename type="first">Q</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Anthony</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shafi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Abduljabbar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Subramoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">K D</forename><surname>Panda</surname></persName>
		</author>
		<idno type="DOI">10.1109/IPDPS54959.2023.00023</idno>
		<ptr target="https://doi.org/10.1109/IPDPS54959.2023.00023" />
		<imprint>
			<date type="published" when="2023">2023</date>
			<biblScope unit="page" from="134" to="144" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Quantized distributed training of large models with convergence guarantees</title>
		<author>
			<persName><forename type="first">I</forename><surname>Markov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Vladu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Alistarh</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2302.02390[cs.LG]</idno>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Training a 1 trillion parameter model with pytorch fully sharded data parallel on aws</title>
		<author>
			<persName><forename type="first">P</forename><surname>Belevich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Shen Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Varma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Damania</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Chauhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Yadav</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-Y</forename><surname>Aquilanti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ranganathan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><surname>Nagrecha</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2301.02691[cs.DC]</idno>
		<title level="m">Systems for parallel and distributed large-model deep learning training</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Research and implementation of gpu-based parallelization of spiking neural network</title>
		<author>
			<persName><forename type="first">T</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yuan</surname></persName>
		</author>
		<idno type="DOI">10.1109/IPEC54454.2022.9777367</idno>
		<ptr target="https://doi.org/10.1109/IPEC54454.2022.9777367" />
	</analytic>
	<monogr>
		<title level="m">2022 IEEE Asia-Pacific Conference on Image Processing, Electronics and Computers (IPEC)</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="199" to="205" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Pytorch: An imperative style, highperformance deep learning library</title>
		<author>
			<persName><forename type="first">A</forename><surname>Paszke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Massa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lerer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Bradbury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Chanan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Killeen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Gimelshein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Antiga</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in neural information processing systems</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">X</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Hou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Min</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Dong</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2303.18223</idno>
		<title level="m">A survey of large language models</title>
		<imprint>
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2401.02385</idno>
		<title level="m">Tinyllama: An open-source small language model</title>
		<imprint>
			<date type="published" when="2024">2024</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Amazon sagemaker model parallelism: A general and flexible framework for large model training</title>
		<author>
			<persName><forename type="first">C</forename><surname>Karakus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Huilgol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Subramanian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Cavdar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rahnama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Quintela</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2111.05972</idno>
		<imprint>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<author>
			<persName><forename type="first">Z</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Chu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2003.06307</idno>
		<title level="m">Communication-efficient distributed deep learning: A comprehensive survey</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Varma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Salpekar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Noordhuis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Paszke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Vaughan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Damania</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.15704</idno>
		<title level="m">Pytorch distributed: Experiences on accelerating data parallel training</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<author>
			<persName><forename type="first">H</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>You</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2212.05339</idno>
		<title level="m">Elixir: Train a large language model on a small gpu cluster</title>
		<imprint>
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Language models are unsupervised multitask learners</title>
		<author>
			<persName><forename type="first">A</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Luan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Amodei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Sutskever</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OpenAI blog</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page">9</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Fluid-gpt (fast learning to understand and investigate dynamics with a generative pre-trained transformer): Efficient predictions of particle trajectories and erosion</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><forename type="middle">A</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">M</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Industrial &amp; Engineering Chemistry Research</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="issue">37</biblScope>
			<biblScope unit="page" from="15278" to="15289" />
			<date type="published" when="2023">2023</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
