<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Using Large Language Models to Enhance Programming Error Messages</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability  status="unknown">
					<licence/>
				</availability>
				<date type="published" when="2022-10-20">20 Oct 2022</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Juho</forename><surname>Leinonen</surname></persName>
							<email>juho.2.leinonen@aalto.fi</email>
							<affiliation key="aff0">
								<orgName type="institution">Aalto University Espoo</orgName>
								<address>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Arto</forename><surname>Hellas</surname></persName>
							<email>arto.hellas@aalto.fi</email>
							<idno type="ORCID">0000-0001-6502-209X</idno>
							<affiliation key="aff1">
								<orgName type="institution">Aalto University Espoo</orgName>
								<address>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Sami</forename><surname>Sarsa</surname></persName>
							<email>sami.sarsa@aalto.fi</email>
							<idno type="ORCID">0000-0002-7277-9282</idno>
							<affiliation key="aff2">
								<orgName type="institution">Aalto University Espoo</orgName>
								<address>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Brent</forename><surname>Reeves</surname></persName>
							<email>brent.reeves@acu.edu</email>
							<idno type="ORCID">0000-0001-5781-1136</idno>
							<affiliation key="aff3">
								<orgName type="institution">Abilene Christian University Abilene</orgName>
								<address>
									<settlement>Texas</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
							<affiliation key="aff4">
								<orgName type="institution">The University of Auckland Auckland</orgName>
								<address>
									<country key="NZ">New Zealand</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">James</forename><surname>Prather</surname></persName>
							<email>james.prather@acu.edu</email>
							<affiliation key="aff5">
								<orgName type="institution">Abilene Christian University Abilene</orgName>
								<address>
									<settlement>Texas</settlement>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
							<email>brett.becker@ucd.ie</email>
							<idno type="ORCID">0000-0003-1446-647X</idno>
							<affiliation key="aff6">
								<orgName type="institution">University College Dublin Dublin</orgName>
								<address>
									<country key="IE">Ireland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Using Large Language Models to Enhance Programming Error Messages</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2022-10-20">20 Oct 2022</date>
						</imprint>
					</monogr>
					<idno type="MD5">AC0827480F8FD593D6428871C1866031</idno>
					<idno type="arXiv">arXiv:2210.11630v1[cs.HC]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.2-SNAPSHOT" ident="GROBID" when="2025-04-29T15:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<label type="revision">92ea31e</label>
					<label type="parameters">startPage=-1, endPage=-1, consolidateCitations=1, consolidateHeader=1, consolidateFunders=0, includeRawAffiliations=false, includeRawCitations=false, includeRawCopyrights=false, generateTeiIds=false, generateTeiCoordinates=[], flavor=null</label>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>AI</term>
					<term>Codex</term>
					<term>compiler error messages</term>
					<term>large language models</term>
					<term>programming error messages</term>
					<term>syntax error messages</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>A key part of learning to program is learning to understand programming error messages. They can be hard to interpret and identifying the cause of errors can be time-consuming. One factor in this challenge is that the messages are typically intended for an audience that already knows how to program, or even for programming environments that then use the information to highlight areas in code. Researchers have been working on making these errors more novice friendly since the 1960s, however progress has been slow. The present work contributes to this stream of research by using large language models to enhance programming error messages with explanations of the errors and suggestions on how to fix the error. Large language models can be used to create useful and novice-friendly enhancements to programming error messages that sometimes surpass the original programming error messages in interpretability and actionability. These results provide further evidence of the benefits of large language models for computing educators, highlighting their use in areas known to be challenging for students. We further discuss the benefits and downsides of large language models and highlight future streams of research for enhancing programming error messages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CCS CONCEPTS</head><p>• Social and professional topics → Computing education; • Computing methodologies → Natural language generation.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Programming Error Messages (PEMs) can be notoriously difficult to decipher, especially for novices <ref type="bibr" target="#b31">[31]</ref>, possibly to the extent that they contribute ot the perception that programming is overly challenging <ref type="bibr" target="#b5">[5]</ref>. Eye tracking studies reveal that novices read error messages and spend a substantial amount of programming time trying to understand them <ref type="bibr" target="#b4">[4]</ref>. Instructors report that they spend a considerable amount of time helping novices with these often cryptic messages <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b29">29,</ref><ref type="bibr" target="#b30">30,</ref><ref type="bibr" target="#b34">34]</ref>. It is also known that error message presentation affects novice programming behaviour <ref type="bibr" target="#b21">[21]</ref>. For over six decades, researchers have attempted to improve these messages, and still there is a call for more work on the matter <ref type="bibr" target="#b6">[6]</ref>. Some recent attempts have been made to put error messages into more natural language by focusing on an increase in readability <ref type="bibr" target="#b7">[7,</ref><ref type="bibr" target="#b16">16]</ref>. This has been shown to improve student understanding of error messages and the number of successful code corrections <ref type="bibr" target="#b15">[15]</ref>. While it is clear that increasing the readability of PEMs is helpful to novices, doing so at scale, and across languages, remains a challenge.</p><p>Very recent work on using large language models in computing education have already produced promising results. One study reported that Codex -built on top of GPT-3 (see Section 2.2) -could solve introductory programming problems, and ranked Codex in the top quartile when compared to a cohort of actual students in a large introductory programming course <ref type="bibr" target="#b17">[17]</ref>. Tools like Codex are able to generate new programming assignments <ref type="bibr" target="#b33">[33]</ref> and code explanations <ref type="bibr" target="#b27">[27]</ref> when provided examples. Such tools demonstrate the impressive interpretive power of very recent large language models that may have the potential to improve the readability of input text. In this paper, we investigate whether large language models can be utilized to parse non-compiling code and the programming errors generated from that code to output PEMs that are more readable than those generated by the compiler/interpreter. RQ1 How well can Codex explain different error messages? RQ2 What is the quality of the code fix suggestions that Codex generates?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BACKGROUND 2.1 Programming Error Messages</head><p>Programming error messages (PEMs) encompass syntax error messages, compiler error messages, and other diagnostic messages that are produced by compilers or interpreters indicating that the input code violates the specification of a language <ref type="bibr" target="#b8">[8]</ref>. Researchers and instructors have reported PEMs to be a difficulty for students since at least 1965 <ref type="bibr" target="#b32">[32]</ref>. More than fifty years later, PEMs are still a barrier to progress for those learning to program <ref type="bibr" target="#b6">[6]</ref>, and this has led to various efforts for improve their usability. One such avenue of work has involved intercepting messages between the compiler and the user and altering their wording or presentation. One of the many known issues with error messages generated by compilers and interpreters is poor readability due to factors such as poor use of vocabulary, strange sentence structure, and the use of jargon <ref type="bibr" target="#b16">[16]</ref>. Thus, a large body of work around socalled 'enhanced compiler error messages' has emerged <ref type="bibr" target="#b8">[8]</ref>. Different approaches to message wording have been reported by various authors, including <ref type="bibr">Barik [3]</ref>, Becker <ref type="bibr" target="#b9">[9]</ref>, Denny <ref type="bibr" target="#b13">[13]</ref>, Kohn <ref type="bibr" target="#b22">[22]</ref>, Pettit <ref type="bibr" target="#b29">[29]</ref>, Prather <ref type="bibr" target="#b31">[31]</ref>, and Karkare <ref type="bibr" target="#b1">[2]</ref>. However, although some studies have shown positive effects of rewording messages for novices <ref type="bibr">[15?</ref> ], in general the evidence for the effectiveness of enhanced compiler error messages is not overwhelming. One of the limitations of prior work in this area is the manual effort that is required to generate message rewordings and a lack of clear guidance for addressing core issues such as readability <ref type="bibr" target="#b16">[16]</ref>.</p><p>Artificial intelligence and machine learning approaches have been used for finding and repairing errors in programs <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b18">18,</ref><ref type="bibr" target="#b19">19]</ref> but only very fundamental approaches have been applied to researching PEMs <ref type="bibr" target="#b10">[10]</ref>. To our knowledge, no prior work has explored the use of large language models for improving PEMs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Large Language Models</head><p>Large Language Models (LLMs), particularly pre-trained transformer models, have rapidly become the core technologies of natural language processing <ref type="bibr" target="#b24">[24]</ref>. One such model is OpenAI GPT-3 (thirdgeneration Generative Pre-trained Transformer) <ref type="bibr" target="#b11">[11]</ref>. GPT-3 can translate between natural languages, compose poetry in the style of human poets, generate convincing essays, and more. GPT-3 also powers several other tools such as OpenAI Codex which is essentially a GPT-3 model that has also been fine-tuned with more than 50 million repositories representing the majority of Python code available on GitHub totalling 159 GB of source code <ref type="bibr" target="#b12">[12]</ref>. Codex is available via the OpenAI API (beta.openai.com) and also powers tools such as GitHub Copilot (copilot.github.com).</p><p>Given the recent emergence of these models, little is yet known about the impact they are likely to have on the computing education landscape. In this context, the few evaluations conducted to date have focused on the accuracy of such models for solving typical introductory programming problems and on the potential for the models to generate learning resources. Early work by Finnie-Ansley et al. assessed the accuracy of Codex by presenting it with typical CS1-type problems, and comparing its performance against that of students. They found that it outperformed most students, and was capable of generating a variety of correct solutions to any given problem <ref type="bibr" target="#b17">[17]</ref>. Sarsa et al. investigated the content generation capabilities of Codex, by providing input examples as prompts and using it to generate novel programming problems and code explanations <ref type="bibr" target="#b33">[33]</ref>. They found that most of the problems generated by Codex were novel and sensible, and that the generated code explanations were generally correct and thorough.</p><p>Given their capability for generating output of human-like quality from contextual inputs, such as code explanations from code, there is potential in applying large language models to the problem of enhancing PEMs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">METHODOLOGY 3.1 Error Messages and Programs</head><p>For the present study, we collected Python error messages that had been reported as the most unreadable in <ref type="bibr" target="#b16">[16]</ref> and <ref type="bibr" target="#b7">[7]</ref>. These error messages were as follows:</p><p>(1) can't assign to function call (2) invalid token (3) illegal target for annotation (4) unindent does no match any outer indentation level (5) positional argument follows keyword argument <ref type="bibr" target="#b6">(6)</ref> unexpected EOF while parsing (7) EOL while scanning string literal (8) EOF while scanning triple-quoted string literal (9) (unicodeerror) 'unicodeescape' codec can't decode bytes To control whether the complexity of the program that results in a given error message affects the ability of large language models to create useful explanations of the message, we constructed three example programs that generated each error message. The first program was very simple, often only a few lines long. The second incorporated the usage of strings and functions. The third included the use of libraries (e.g., the PyGame game library, pandas, scikit-learn) and was more complex. To create the same error messages as in the works by <ref type="bibr" target="#b16">[16]</ref> and <ref type="bibr" target="#b7">[7]</ref>, we used Python version 3.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Generating Programming Error Messages</head><p>Programming error messages were generated using the Codex model that was most recent and performant at the time of analysis, which was the code-davinci-002 -model. As the utility of large language models depends on the used prompts (see e.g., <ref type="bibr" target="#b26">[26]</ref>), it is important to do "prompt engineering" where the performance of different types of prompts is evaluated <ref type="bibr" target="#b26">[26]</ref>. We evaluated a number of prompts to identify a version that seemed to provide useful explanations. We tried five different prompt messages:</p><p>1. Plain English explanation of why does running the above code cause an error and how to fix the problem 2. Plain English explanation of why running the above code causes the above error in the output and instructions on how to fix the problem 3. Explanation of why running the above code causes the above error and instructions on how to fix the problem 4. Why does the code result in an error message? How can the code be fixed? 5. Why does the above code cause the above error message in the output? How can the code be fixed?</p><p>We generated explanations with all five prompts and checked which version led to the fewest empty responses from Codex. The number of empty responses was 4, 6, 7, 16 and 27 out of 81 generated explanations respectively for the prompts 1 to 5 above. We chose the first for the analysis as it generated the fewest empty responses. The structure of the prompt given to the large language model can be seen in the Codex Examples provided later in this article.</p><p>For each error message (9 error messages) and each program leading to an error message (3 programs), we generated three code explanations, one with Codex temperature parameter set to 0, and two with temperature set to 0.7. We chose these values as 0 is the minimum for the parameter and leads to least randomness, i.e. most deterministic outputs. The value of 0.7 is the default value for the parameter and leads to more random (or "creative") responses, and is less deterministic, which is also why we generated two explanations for the value of 0.7. This led to a total of 9 × 3 × 3 = 81 unique combinations of programming error message, program category, and temperature value, which we subsequently evaluated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Analysis</head><p>We qualitatively analyzed the LLM-produced PEMs. The evaluation was performed by two researchers, both of whom have experience from teaching introductory programming. For the evaluation, we considered the following aspects of the generated PEMs.</p><p>(1) Comprehensible: was the generated content intelligible (i.e.</p><p>proper English, not nonsensical) (2) Unnecessary content: did the generated explanation contain unnecessary content (e.g., repeating content, comprehensible but irrelevant content) (3) Has explanation: did the content produced by the LLM contain an explanation of the programming error message (4) Explanation correct: did the content produced by the LLM contain a correct explanation of the programming error message (5) Has fix: did the generated explanation contain actions or steps that one should take to fix the error (6) Fix correct: did the content produced by the LLM contain correct actions or steps that one should take to fix the error (7) Improvement over the original: did the explanation provide added value (from a novice programmer standpoint) when compared to the original programming error message</p><p>The researchers first had a brief discussion to ensure a shared understanding of the above aspects and jointly evaluated three examples. After the discussion and initial joint evaluation, they separately analyzed the full set of generated explanations. For each aspect, the researchers chose either "yes" or "no". For evaluation, the researchers also had access to the original error message as well as the program that produced the error message, and considered also these when evaluating the LLM generated explanations. To examine the validity of the approach, we calculated inter-rater reliability between the researchers using Cohen's kappa. The kappa value was 0.83 over all the analyzed aspects, indicating almost perfect agreement <ref type="bibr" target="#b23">[23]</ref>.</p><p>To answer both of our research questions, we report the percentage of "yes" answers for the questions outlined above separately for each different programming error message and separately for each combination of program category and temperature value. The proportion of "yes" answers is calculated out of the full set of 162 data points: 2 raters, each with 81 distinct ratings for the unique combinations of programming error message (n = 9), program (n = 3), and Codex output (n = 3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">RESULTS</head><p>Table <ref type="table" target="#tab_0">1</ref> shows the results of the analysis separately for each error message. Each cell of the table presents the percentage of "yes" answers to the evaluation question (see Section 3.3 for the questions) for each of the nine error messages. The cells in the bottom row of the table show the percentage of "yes" answers across all error messages for the evaluation question indicated by the column.</p><p>In general, most error message explanations created by Codex were comprehensible (percentage of "yes" ranging from 67% to 100%). A few of the created explanations contained unnecessary content such as repeated sentences, extra question marks, etcthe percentage ranging from 11% for "unexpected EOF while parsing" to 56% for "EOF while scanning triple-quoted string literal" and "(unicodeerror) 'unicodeescape' codec can't decode bytes".</p><p>In most cases, Codex successfully created an explanation of the error message (67% to 100% of the time depending on error message), although there were considerable differences between error messages on whether the explanation was correct. The range of correct explanations ranged from 11% for "unexpected EOF while parsing" to 83% for "can't assign to function call".</p><p>Regarding Codex's ability to create actionable fixes based on the faulty source code and the programming error message, we found that in the majority of cases, Codex provided a fix in the generated explanation (44% to 89% of cases). However, the fix was correct only 33% of the time, ranging from 17% of the time for "EOL while scanning string literal" to 56% for "(unicodeerror) 'unicodeescape' codec can't decode bytes".</p><p>Altogether, the evaluators considered that the Codex-created content, i.e. the explanation of the error message and the proposed fix, were an improvement over the original error message in slightly over half of the cases (54%). There were some differences between different error messages: the content was an improvement only 22% of the time for the "unexpected EOF while parsing" error message, while it was considered an improvement in 78% of the cases for "can't assign to function call" and "invalid token".</p><p>Table <ref type="table">2</ref> shows the results of the analysis separately for different combinations of program category and temperature value. From the table, it is evident that for the task of explaining PEMs and creating suggestions for fixes to the source code that produced those errors, using a temperature value of 0 resulted in considerably better outputs, which holds for all three program categories. For example, the output was considered an improvement in over 70% of the cases with a temperature value of 0, while only up to 50% of the cases with a temperature value of 0.7.</p><p>Regarding differences between program categories, we can observe that Codex seems to perform slightly worse with the programs in the "function with strings" category. However, the variations between program categories are not as noticeable as the differences between different temperature values or different error messages. Table 2: Effect of temperature and program category on Codex performance in the task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">DISCUSSION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Are Error Message Explanations Useful?</head><p>Our results suggest that using large language models to explain programming error messages (PEMs) is feasible and shows promise. Overall, the explanation was considered an improvement over the original programming error message in over half of the cases. If we only consider the results from using temperature value 0, which were overall better, over 70% of the Codex outputs were considered an improvement over the original programming error message. The results are more sobering when it comes to using large language models to generate correct fixes. Although 70% included a fix, when a fix was included it was correct only under half of the time (47%). While the fixes created with the temperature value of 0 were better on average compared to those created with a value of 0.7, they were still correct in only around half of the cases -42%, 56%, and 61% of the cases for functions with strings, simple programs, and library related programs respectively.</p><p>We propose that the generated content could be useful to students if it were delivered so that it is clear that the content is AI-generated and might not be correct. And even with this initial exploratory setup, we found some outputs (two examples seen in Codex Example 1 and Codex Example 2) that we consider good enough to be shown to students without modifications. ŜyntaxError: unexpected EOF while parsing Plain English explanation of why does running the above code cause an error and how to fix the problem</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Common Pitfalls and Ways Around Them</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→ ↩→</head><p>The error is caused because the block of code is expecting another line of code after the colon.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→</head><p>To fix the issue, I would add another line of code after the colon.</p><p>↩→ seem similarly confident in their tone, which could potentially mislead students. In both of the examples where the output is incorrect, Codex suggests that the issue is related to indentation. As novices often struggle with indentation <ref type="bibr" target="#b22">[22,</ref><ref type="bibr" target="#b25">25]</ref>, these incorrect suggestions could exacerbate this by potentially misleading students and even introduce misconceptions related to correct indentation. In general, we observed a few common pitfalls that Codex seemed to often struggle with: (1) source code clearly missing a part of the content (resulting in "unexpected EOF while parsing", see e. The error is caused by the backslash character in the string.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→</head><p>The backslash character is used to escape characters that would otherwise have a special meaning, such as newline, backslash itself, or the quote character.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→ ↩→</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→</head><p>Since the backslash is used for escaping, if you want to use it in your string, you need to escape it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→</head><p>You can do that by using a double backslash:</p><p>Codex Example 3 (input in black, output in red) ŜyntaxError: unexpected EOF while parsing Plain English explanation of why does running the above code cause an error and how to fix the problem ↩→ ↩→ # The above code is not indented enough to be able to be run by Python.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→</head><p># Add more spaces or tabs to the start of each line of code to be able to run it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→</head><p>(resulting in "illegal target for annotation", see e.g., Codex Example 4), and (3) missing quotation marks (resulting in either "EOL while scanning string literal" or "EOF while scanning triple-quoted string literal"). For the first case, Codex would often suggest to fix the indentation of the program, even though the problem was that the implementation was far from complete (as in Codex Example 3). Similar suggestions for fixing the indentation were observed for the second case as well, even though the problem is in the capitalization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Codex Example 4 (input in black, output in red)</head><p>Code def check_password(password, input):</p><p>If (input == s3cr37 ): print( You are in! ) Else: print( Wrong password! ) input = hunter2 check_password( s3cr37 , input) Output File main.py , line 2</p><p>If (input == s3cr37 ): print( You are in! ) ŜyntaxError: illegal target for annotation Plain English explanation of why does running the above code cause an error and how to fix the problem</p><formula xml:id="formula_0">↩→ ↩→</formula><p>The error is caused by the fact that the code is not indented properly. The code should be indented by 4 spaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>↩→ ↩→</head><p>This can be seen in Codex Example 4, where the issue is that the if-statement is capitalized, but the message claims the issue is with indentation. For the third case, Codex was often unable to correctly identify whether the quotation mark was missing from the beginning or the end of the string, and sometimes suggested that the issue is related to parentheses instead of missing quotation marks. Indeed, the program category "function with strings" had the lowest scores overall (see Table <ref type="table">2</ref>). While it was relatively rare, we did observe some outputs that were not just incorrect, but even contradictory and confusing. In one case, Codex seems to have focused too much on the "Plain English" portion of the input and started generating irrelevant content related to "looking for a plain English explanation". To add to the confusion, the generated output actually does include a correct explanation of the problem -"You need to end your string with three single quotes at the end of your string to make it work. ", but the output also states that "this is not a correct explanation".</p><p>As there were common pitfalls and clear differences between explanation quality, we see one stream of future work in using a twotiered approach for creating explanations. Codex could be relied upon in cases where it is known that it likely performs well, while in other cases other means could be exercised. One possibility is using LLMs to pre-generate explanations of common error messages that the instructor could validate (essentially, a "human-inthe-loop" approach). Another possibility would be the use of learnersourcing, where students could ask for help from their peers; classic approaches such as discussion forums would also work, although the response times would be lower when compared to the near-instantaneous feedback from Codex.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Explanations and Context</head><p>When considering the usefulness of Codex-generated explanations, they need to be interpreted and evaluated in context. First, the original error messages might be more useful for more experienced students who have learned to interpret them. The importance of context was present also in some of the disagreements of the two researchers who independently evaluated the error messages; for example, one of the researchers at times considered the error message as an improvement if it pointed the students to the correct direction, even if the explanation by itself would be faulty.</p><p>The utility of these explanations also depends on whether students understand the implications of the suggestions. Prior research into LLMs has shown that when they are used to facilitate the creation of source code, they may lead students down debugging rabbit holes <ref type="bibr" target="#b35">[35]</ref> or even introduce security flaws <ref type="bibr" target="#b28">[28]</ref>. We also see the potential for other types of LLM problems. For example, what if the problem is not with the source code, but an issue with the user environment -here, a student could ask for help to fix an issue, convincing the LLM that an issue exists, and going down a rabbit hole when looking for a solution <ref type="bibr" target="#b35">[35]</ref>.</p><p>Despite the shortcomings, we see the potential of using LLMs as a scaffold when learning to program and when learning to interpret error messages. However, as with any instructional scaffolding, the scaffolding should be dismantled at some point <ref type="bibr" target="#b20">[20]</ref>, and students must eventually learn to understand the original error messages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Limitations</head><p>There are limitations to our study, which we outline here. Firstly, we used Python 3.6 in the analysis similar to prior work <ref type="bibr" target="#b16">[16]</ref>. On one hand, this allowed us to focus on error messages from the literature that had been found to be confusing to students. On the other hand, we acknowledge that newer versions of Python have included improvements to some of the error messages we analyzed. For example, some of the code snippets we used that resulted in an "invalid token" error would have resulted into a "SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers" with newer Python versions. We consider the latter to be easier to understand for novice programmers.</p><p>Regarding the code snippets used in the analysis, they were created by the authors and were not student code. It is possible that the performance of Codex in explaining error messages for student code would be different. In our future work, we are interested in studying the error message explanations with student programs and with student evaluators. In addition, most of the source codes were relatively short. The performance of large language models in explaining error messages might be affected by the length or the complexity of source code, which future work should examine in greater detail. Similarly, our code snippets only included singular errors -future work could analyze how well large language models can explain error messages when the source code that leads to those messages contains multiple issues.</p><p>When prompting Codex to generate an explanation of the error message and a fix to the program, we asked for both the explanation and the fix with a single prompt ("Plain English explanation of why does running the above code cause an error and how to fix the problem"). Performance could have increased had we asked for these separately. In addition, we did not give any examples of good error message explanations and fixes to the code in the prompti.e. we relied on "zero shot learning" <ref type="bibr" target="#b26">[26]</ref>. Prior work has found that giving even just a few examples (i.e. "few shot learning") can drastically improve the performance of large language models <ref type="bibr" target="#b11">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p>We used large language models to try improve programming error messages (PEMs). We collected Python error messages that had been reported as most unreadable in prior work <ref type="bibr" target="#b7">[7,</ref><ref type="bibr" target="#b16">16]</ref> and generated code examples that produced these error messages. We conducted prompt engineering using OpenAI Codex to identify prompts that would produce explanations of the PEMs and actionable fixes that could be applied to the code examples to fix the error. We evaluated the explanations and fixes created to examine whether they have utility in introductory programming classrooms. To summarize, we answer our research questions as follows.</p><p>RQ1: How well can Codex explain different error messages? Overall, the explanations created by Codex were quite comprehensible (88%). Codex produced an output with an explanation to 84% of the provided codes and error messages, but only about half (57%) of these explanations were deemed correct (48% of all inputs).</p><p>RQ2: What is the quality of the code fix suggestions that Codex generates? Although 70% of the outputs had a proposed fix, a little less than half (47%) of those were deemed correct (33% of all inputs).</p><p>While the above results are aggregated over different PEMs, program categories, and Codex temperature values, we found cases where Codex seems to perform better. For example, we noticed that the results were better across the board when using the temperature value of 0. Similarly, we found that there were certain cases where Codex was more likely to provide faulty explanations and suggest fixes that are incorrect, and highlighted a potential way around this by having a two-step system that would look into the error message and the complexity of the source code before deciding whether to use LLMs or other more traditional support mechanisms.</p><p>The key implications of this work are that programming error message explanations and suggested fixes generated by LLMs are not yet ready for production use in introductory programming classes, as there are risks that students may interpret potentially faulty LLM outputs as coming from an authority, and end up attempting to fix their programs in ways that do not actually help. At the same time, our results show that LLMs could be a useful tool for improving PEMs, although additional effort needs to be taken both when using LLMs to enhance the error messages and when coming up with ways to produce high-quality enhancements. Enhancing programming error messages could help students in debugging their programs as traditional error messages are often cryptic and hard to understand for novice programmers <ref type="bibr" target="#b15">[15,</ref><ref type="bibr" target="#b16">16]</ref>.</p><p>The present results were obtained with the code-davinci-002 model of OpenAI Codex, which was the most recent and performant Codex model at the time of the study. As LLMs improve over time, these results create a baseline that future model performance can be compared to. Future work should look in more depth into prompt engineering, for example by considering including the problem statement and perhaps a sample solution into the input, as well as look into applying and evaluating the enhanced programming error messages in classroom settings.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><figDesc>Two examples of outputs where both the explanation and suggested fix generated by Codex were incorrect are shown in Codex Examples 3 and 4. Comparing these incorrect outputs with the correct outputs in Examples 1 and 2, we observe that the messages Codex Example 1 (input in black, output in red) Code def check_password(password, input): return password == input input = hunter2 if check_password( s3cr37 , input): Output File main.py , line 5</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><figDesc>g., Codex Example 3),<ref type="bibr" target="#b1">(2)</ref> incorrectly capitalized control statements Codex Example 2 (input in black, output in red) Code users_dir_path = C:\Users print( Users directory is , users_dir_path) Output File main.py , line 1 users_dir_path = C:\Users ŜyntaxError: (unicode error) unicodeescape codec can t decode bytes in position 2-3: truncated \UXXXXXXXX escape ↩→ ↩→ Plain English explanation of why does running the above code cause an error and how to fix the problem ↩→ ↩→</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><figDesc>.display.set_mode((640, 400)) pygame.display.set_caption( Awesome game! ) def main():while True: Output File main.py , line 8</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Error message analysis for each research question. The cells show the percentage of "yes" answers out of all ("yes" and "no") answers for the analysis.</figDesc><table><row><cell>RQ1</cell><cell>RQ2</cell></row></table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName><forename type="first">Toufique</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noah</forename><forename type="middle">Rose</forename><surname>Ledesma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Premkumar</forename><surname>Devanbu</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2104.14671</idno>
		<title level="m">SYNFIX: Automatically Fixing Syntax Errors using Compiler Diagnostics</title>
		<imprint>
			<date type="published" when="2021">2021. 2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Compilation Error Repair: For the Student Programs, From the Student Programs</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Umair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pawan</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amey</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Purushottam</forename><surname>Karkare</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sumit</forename><surname>Kar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gulwani</surname></persName>
		</author>
		<idno type="DOI">10.1145/3183377.3183383</idno>
		<ptr target="https://doi.org/10.1145/3183377.3183383" />
	</analytic>
	<monogr>
		<title level="m">ICSE-SEET 2018 : 2018 ACM/IEEE 40th International Conference on Software Engineering : Software Engineering Education and Training : proceedings</title>
		<meeting><address><addrLine>Gothenburg, Sweden; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2018-05-30">2018. 30 May -1 June 2018</date>
			<biblScope unit="page" from="78" to="87" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">Titus</forename><surname>Barik</surname></persName>
		</author>
		<title level="m">Error Messages as Rational Reconstructions</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName><forename type="middle">D</forename><surname>Ph</surname></persName>
		</author>
		<author>
			<persName><surname>Dissertation</surname></persName>
		</author>
		<ptr target="https://repository.lib.ncsu.edu/handle/1840.20/35439" />
		<imprint>
			<pubPlace>Raleigh</pubPlace>
		</imprint>
		<respStmt>
			<orgName>North Carolina State University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Do Developers Read Compiler Error Messages?</title>
		<author>
			<persName><forename type="first">Titus</forename><surname>Barik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Justin</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kevin</forename><surname>Lubick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elisabeth</forename><surname>Holmes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jing</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emerson</forename><surname>Murphy-Hill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chris</forename><surname>Parnin</surname></persName>
		</author>
		<idno type="DOI">10.1109/ICSE.2017.59</idno>
		<ptr target="https://doi.org/10.1109/ICSE.2017.59" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 39th International Conference on Software Engineering</title>
		<meeting>the 39th International Conference on Software Engineering<address><addrLine>Buenos Aires, Argentina; Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="575" to="585" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">What Does Saying That &apos;Programming is Hard&apos; Really Say, and About Whom?</title>
		<author>
			<persName><forename type="first">A</forename><surname>Brett</surname></persName>
		</author>
		<author>
			<persName><surname>Becker</surname></persName>
		</author>
		<idno type="DOI">10.1145/3469115</idno>
		<ptr target="https://doi.org/10.1145/3469115" />
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="page" from="27" to="29" />
			<date type="published" when="2021-07">2021. jul 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Compiler Error Messages Considered Unhelpful: The Landscape of Text-Based Programming Error Message Research</title>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raymond</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Durell</forename><surname>Bouchard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dennis</forename><forename type="middle">J</forename><surname>Bouvier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brian</forename><surname>Harrington</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amir</forename><surname>Kamil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amey</forename><surname>Karkare</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chris</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter-Michael</forename><surname>Osera</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Janice</forename><forename type="middle">L</forename><surname>Pearce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Prather</surname></persName>
		</author>
		<idno type="DOI">10.1145/3344429.3372508</idno>
		<ptr target="https://doi.org/10.1145/3344429.3372508" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Working Group Reports on Innovation and Technology in Computer Science Education</title>
		<meeting>the Working Group Reports on Innovation and Technology in Computer Science Education<address><addrLine>Aberdeen, Scotland Uk; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="177" to="210" />
		</imprint>
	</monogr>
	<note>ITiCSE-WGR &apos;19)</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Towards Assessing the Readability of Programming Error Messages</title>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Prather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raymond</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Nix</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Catherine</forename><surname>Mooney</surname></persName>
		</author>
		<idno type="DOI">10.1145/3441636.3442320</idno>
		<ptr target="https://doi.org/10.1145/3441636.3442320" />
	</analytic>
	<monogr>
		<title level="m">Australasian Computing Education Conference (Virtual, SA, Australia) (ACE &apos;21)</title>
		<meeting><address><addrLine>New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2021">2021</date>
			<biblScope unit="page" from="181" to="188" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Effective Compiler Error Message Enhancement for Novice Programming Students</title>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Graham</forename><surname>Glanville</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ricardo</forename><surname>Iwashima</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Claire</forename><surname>Mcdonnell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kyle</forename><surname>Goslin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Catherine</forename><surname>Mooney</surname></persName>
		</author>
		<idno type="DOI">10.1080/08993408.2016.1225464</idno>
		<ptr target="https://doi.org/10.1080/08993408.2016.1225464" />
	</analytic>
	<monogr>
		<title level="j">Computer Science Education</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">2-3</biblScope>
			<biblScope unit="page" from="148" to="175" />
			<date type="published" when="2016">2016. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The Effects of Enhanced Compiler Error Messages on a Syntax Error Debugging Test</title>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kyle</forename><surname>Goslin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Graham</forename><surname>Glanville</surname></persName>
		</author>
		<idno type="DOI">10.1145/3159450.3159461</idno>
		<ptr target="https://doi.org/10.1145/3159450.3159461" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 49th ACM Technical Symposium on Computer Science Education</title>
		<meeting>the 49th ACM Technical Symposium on Computer Science Education<address><addrLine>Baltimore, Maryland, USA; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="640" to="645" />
		</imprint>
	</monogr>
	<note>SIGCSE &apos;18)</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Categorizing Compiler e Error Messages with Principal Component Analysis</title>
		<author>
			<persName><forename type="first">A</forename><surname>Brett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Catherine</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><surname>Mooney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th China-Europe International Symposium on Software Engineering Education (CEISEE 2016)</title>
		<meeting><address><addrLine>Shenyang, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016-05">2016. May 2016</date>
			<biblScope unit="page" from="28" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Language Models are Few-shot Learners</title>
		<author>
			<persName><forename type="first">Tom</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Mann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Melanie</forename><surname>Subbiah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jared</forename><forename type="middle">D</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Prafulla</forename><surname>Dhariwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arvind</forename><surname>Neelakantan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pranav</forename><surname>Shyam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Girish</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amanda</forename><surname>Askell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in neural information processing systems</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="1877" to="1901" />
			<date type="published" when="2020">2020. 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<author>
			<persName><forename type="first">Mark</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jerry</forename><surname>Tworek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heewoo</forename><surname>Jun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qiming</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Henrique</forename><surname>Ponde De Oliveira Pinto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jared</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Harri</forename><surname>Edwards</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuri</forename><surname>Burda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicholas</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><surname>Brockman</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2107.03374</idno>
		<title level="m">Evaluating Large Language Models Trained on Code</title>
		<imprint>
			<date type="published" when="2021">2021. 2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Enhancing Syntax Error Messages Appears Ineffectual</title>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Luxton-Reilly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dave</forename><surname>Carpenter</surname></persName>
		</author>
		<idno type="DOI">10.1145/2591708.2591748</idno>
		<ptr target="https://doi.org/10.1145/2591708.2591748" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th Conference on Innovation and Technology in Computer Science Education</title>
		<meeting>the 19th Conference on Innovation and Technology in Computer Science Education<address><addrLine>Uppsala, Sweden; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="273" to="278" />
		</imprint>
	</monogr>
	<note>ITiCSE &apos;14</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Understanding the Syntax Barrier for Novices</title>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Luxton-Reilly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ewan</forename><surname>Tempero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Hendrickx</surname></persName>
		</author>
		<idno type="DOI">10.1145/1999747.1999807</idno>
		<ptr target="https://doi.org/10.1145/1999747.1999807" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Annual Joint Conference on Innovation and Technology in Computer Science Education</title>
		<meeting>the 16th Annual Joint Conference on Innovation and Technology in Computer Science Education<address><addrLine>Darmstadt, Germany; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="208" to="212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Error Message Readability and Novice Debugging Performance</title>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Prather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2020 ACM Conference on Innovation and Technology in Computer Science Education</title>
		<meeting>the 2020 ACM Conference on Innovation and Technology in Computer Science Education</meeting>
		<imprint>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="480" to="486" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On Designing Programming Error Messages for Novices: Readability and Its Constituent Factors</title>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Prather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Catherine</forename><surname>Mooney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Homer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zachary</forename><forename type="middle">C</forename><surname>Albrecht</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Garrett</forename><forename type="middle">B</forename><surname>Powell</surname></persName>
		</author>
		<idno type="DOI">10.1145/3411764.3445696</idno>
		<ptr target="https://doi.org/10.1145/3411764.3445696" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems (Yokohama, Japan) (CHI &apos;21)</title>
		<meeting>the 2021 CHI Conference on Human Factors in Computing Systems (Yokohama, Japan) (CHI &apos;21)<address><addrLine>New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
	<note>Article 55, 15 pages</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The Robots Are Coming: Exploring the Implications of OpenAI Codex on Introductory Programming</title>
		<author>
			<persName><forename type="first">James</forename><surname>Finnie-Ansley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Luxton-Reilly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Prather</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Australasian Computing Education Conference</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="10" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Deep Reinforcement Learning for Syntactic Error Repair in Student Programs</title>
		<author>
			<persName><forename type="first">Rahul</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Kanade</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shirish</forename><surname>Shevade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the AAAI Conference on Artificial Intelligence</title>
		<meeting>the AAAI Conference on Artificial Intelligence</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="930" to="937" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Deepfix: Fixing common C Language Errors by Deep Learning</title>
		<author>
			<persName><forename type="first">Rahul</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Soham</forename><surname>Pal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Kanade</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shirish</forename><surname>Shevade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Thirty-First AAAI conference on artificial intelligence</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Expertise Reversal Effect</title>
		<author>
			<persName><forename type="first">Slava</forename><surname>Kalyuga</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Managing cognitive load in adaptive multimedia learning</title>
		<imprint>
			<publisher>IGI Global</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="58" to="80" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The Effects of Compilation Mechanisms and Error Message Presentation on Novice Programmer Behavior</title>
		<author>
			<persName><forename type="first">Ioannis</forename><surname>Karvelas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Annie</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brett</forename><forename type="middle">A</forename><surname>Becker</surname></persName>
		</author>
		<idno type="DOI">10.1145/3328778.3366882</idno>
		<ptr target="https://doi.org/10.1145/3328778.3366882" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 51st ACM Technical Symposium on Computer Science Education</title>
		<meeting>the 51st ACM Technical Symposium on Computer Science Education<address><addrLine>Portland, OR, USA; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="759" to="765" />
		</imprint>
	</monogr>
	<note>SIGCSE &apos;20)</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The Error Behind The Message: Finding the Cause of Error Messages in Python</title>
		<author>
			<persName><forename type="first">Tobias</forename><surname>Kohn</surname></persName>
		</author>
		<idno type="DOI">10.1145/3287324.3287381</idno>
		<ptr target="https://doi.org/10.1145/3287324.3287381" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 50th ACM Technical Symposium on Computer Science Education</title>
		<meeting>the 50th ACM Technical Symposium on Computer Science Education<address><addrLine>Minneapolis, MN, USA; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="524" to="530" />
		</imprint>
	</monogr>
	<note>SIGCSE &apos;19)</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The Measurement of Observer Agreement for Categorical Data</title>
		<author>
			<persName><forename type="first">Richard</forename><surname>Landis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gary</forename><forename type="middle">G</forename><surname>Koch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">biometrics</title>
		<imprint>
			<biblScope unit="page" from="159" to="174" />
			<date type="published" when="1977">1977. 1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Language Models: Past, Present, and Future</title>
		<author>
			<persName><forename type="first">Hang</forename><surname>Li</surname></persName>
		</author>
		<idno type="DOI">10.1145/3490443</idno>
		<ptr target="https://doi.org/10.1145/3490443" />
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="page" from="56" to="63" />
			<date type="published" when="2022-06">2022. jun 2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Static Analyses in Python Programming Courses</title>
		<author>
			<persName><forename type="first">David</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Petersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 50th ACM Technical Symposium on Computer Science Education</title>
		<meeting>the 50th ACM Technical Symposium on Computer Science Education</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="666" to="671" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">Pengfei</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Weizhe</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jinlan</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhengbao</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hiroaki</forename><surname>Hayashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Graham</forename><surname>Neubig</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2107.13586</idno>
		<title level="m">Pre-train, Prompt, and Predict: A Systematic Survey of Prompting Methods in Natural Language Processing</title>
		<imprint>
			<date type="published" when="2021">2021. 2021</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Generating Diverse Code Explanations using the GPT-3 Large Language Model</title>
		<author>
			<persName><forename type="first">Stephen</forename><surname>Macneil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dan</forename><surname>Mogil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Seth</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Erin</forename><surname>Ross</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ziheng</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2022 ACM Conference on International Computing Education Research</title>
		<meeting>the 2022 ACM Conference on International Computing Education Research</meeting>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="37" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Asleep at the Keyboard? Assessing the Security of GitHub Copilot&apos;s Code Contributions</title>
		<author>
			<persName><forename type="first">Hammond</forename><surname>Pearce</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Baleegh</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brendan</forename><surname>Dolan-Gavitt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ramesh</forename><surname>Karri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2022 IEEE Symposium on Security and Privacy (SP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="754" to="768" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Do Enhanced Compiler Error Messages Help Students? Results Inconclusive</title>
		<author>
			<persName><forename type="first">Raymond</forename><forename type="middle">S</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Homer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Roger</forename><surname>Gee</surname></persName>
		</author>
		<idno type="DOI">10.1145/3017680.3017768</idno>
		<ptr target="https://doi.org/10.1145/3017680.3017768" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education</title>
		<meeting>the 2017 ACM SIGCSE Technical Symposium on Computer Science Education<address><addrLine>Seattle, Washington, USA; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="465" to="470" />
		</imprint>
	</monogr>
	<note>SIGCSE &apos;17)</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Metacognitive Difficulties Faced by Novice programmers in Automated Assessment Tools</title>
		<author>
			<persName><forename type="first">James</forename><surname>Prather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raymond</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kayla</forename><surname>Mcmurry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alani</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Homer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maxine</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2018 ACM Conference on International Computing Education Research</title>
		<meeting>the 2018 ACM Conference on International Computing Education Research</meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="41" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">On Novices&apos; Interaction with Compiler Error Messages: A Human Factors Approach</title>
		<author>
			<persName><forename type="first">James</forename><surname>Prather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raymond</forename><surname>Pettit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kayla</forename><surname>Holcomb Mcmurry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alani</forename><surname>Peters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Homer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nevan</forename><surname>Simone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maxine</forename><surname>Cohen</surname></persName>
		</author>
		<idno type="DOI">10.1145/3105726.3106169</idno>
		<ptr target="https://doi.org/10.1145/3105726.3106169" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 ACM Conference on International Computing Education Research</title>
		<meeting>the 2017 ACM Conference on International Computing Education Research<address><addrLine>Tacoma, Washington, USA; New York, NY,USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="74" to="82" />
		</imprint>
	</monogr>
	<note>) (ICER &apos;17)</note>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">PUFFT-The Purdue University Fast FORTRAN Translator</title>
		<author>
			<persName><forename type="first">Saul</forename><surname>Rosen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><forename type="middle">A</forename><surname>Spurgeon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joel</forename><forename type="middle">K</forename><surname>Donnelly</surname></persName>
		</author>
		<idno type="DOI">10.1145/365660.365671</idno>
		<ptr target="https://doi.org/10.1145/365660.365671" />
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="661" to="666" />
			<date type="published" when="1965-11">1965. nov 1965</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Automatic Generation of Programming Exercises and Code Explanations Using Large Language Models</title>
		<author>
			<persName><forename type="first">Sami</forename><surname>Sarsa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Paul</forename><surname>Denny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arto</forename><surname>Hellas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Juho</forename><surname>Leinonen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2022 ACM Conference on International Computing Education Research V</title>
		<meeting>the 2022 ACM Conference on International Computing Education Research V</meeting>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="27" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">An Empirical Investigation into Programming Language Syntax</title>
		<author>
			<persName><forename type="first">Andreas</forename><surname>Stefik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Susanna</forename><surname>Siebert</surname></persName>
		</author>
		<idno type="DOI">10.1145/2534973</idno>
		<ptr target="https://doi.org/10.1145/2534973" />
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computing Education</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="1" to="40" />
			<date type="published" when="2013">2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Expectation vs. Experience: Evaluating the Usability of Code Generation Tools Powered by Large Language Models</title>
		<author>
			<persName><forename type="first">Priyan</forename><surname>Vaithilingam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tianyi</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elena</forename><forename type="middle">L</forename><surname>Glassman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CHI Conference on Human Factors in Computing Systems Extended Abstracts</title>
		<imprint>
			<date type="published" when="2022">2022</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
